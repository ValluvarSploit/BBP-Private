name: Subdomain Permutation Bruteforce Recon
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.DOMAIN }}
      HOST: ${{ secrets.NGROK_URL }}
      EXCLUDE_HOST: ${{ secrets.EXCLUDE_HOST }}
      S_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      WEBHOOK: ${{ secrets.WHOOK_JOB_ALERTS }}
      S_URL: https://slack.com/api/files.upload
      CUSTOM_GIT_CREDS : ${{ secrets.CUSTOM_GIT_CREDENTIALS }}
      CUSTOM_GIT_CONFIG : ${{ secrets.CUSTOM_GIT_CONFIG }} 

jobs:
  DNSgen:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: DNSgen
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         wget -q $HOST/hosts-live.txt; cp wordlists/top-vulnerable-subdomains.txt .;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;       
         bash Domain_Monitoring/scripts/dnsgen.sh hosts-live.txt; mv dnsgen-wordlist.txt.xz dnsgen-wordlist-1.txt.xz;
         bash Domain_Monitoring/scripts/dnsgen.sh top-vulnerable-subdomains.txt; mv dnsgen-wordlist.txt.xz dnsgen-wordlist-2.txt.xz;
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
         name: dnsgen-artifacts
         path: |
          dnsgen-wordlist-1.txt.xz
          dnsgen-wordlist-2.txt.xz
      - name: Slack
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK" ;

  MassDNS-1:
    if: always()
    runs-on: ubuntu-latest
    needs: DNSgen
    steps:
      - uses: actions/checkout@v2 
      - uses: actions/download-artifact@v2
        with:
         name: dnsgen-artifacts
      - name: MassDNS
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;         
         xz -d dnsgen-wordlist-1.txt.xz;
         cat dnsgen-wordlist-1.txt | sed 's/\*\.//g' | sort -u > wordlists.txt;
         echo "[+] Wordlist count is `cat wordlists.txt`"
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/massdns.sh;
         cp hosts-massdns.txt hosts-massdns-1.txt;
         xz hosts-massdns-1.txt;
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
         name: massdns-1-artifacts
         path: |
          hosts-massdns-1.txt.xz
          dnsgen-wordlist-2.txt.xz
      - name: Slack
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK" ;
  
  MassDNS-2:
    if: always()
    runs-on: ubuntu-latest
    needs: [DNSgen,MassDNS-1]
    steps:
      - uses: actions/checkout@v2 
      - uses: actions/download-artifact@v2
        with:
         name: massdns-1-artifacts
      - name: MassDNS
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;         
         xz -d dnsgen-wordlist-2.txt.xz;
         cat dnsgen-wordlist-2.txt | sed 's/\*\.//g' | sort -u > wordlists.txt;
         echo "[+] Wordlist count is `cat wordlists.txt`";
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/massdns.sh;
         cp hosts-massdns.txt hosts-massdns-2.txt;
         xz hosts-massdns-2.txt;
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
         name: massdns-2-artifacts
         path: |
          hosts-massdns-1.txt.xz
          hosts-massdns-2.txt.xz
      - name: Slack
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK" ;

  DNSx:
    runs-on: ubuntu-latest
    if: always()
    needs: MassDNS-2
    steps:
      - uses: actions/checkout@v2 
      - uses: actions/download-artifact@v2
        with:
         name: massdns-2-artifacts
      - name: DNSx
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         echo "$EXCLUDE_HOST" > exclude-host.txt;
         xz -d hosts-massdns-{1..2}.txt.xz; cat hosts-massdns-{1..2}.txt > hosts-massdns-temp.txt; 
         cat hosts-massdns-temp.txt | sed 's/\*\.//g' > subdomains-temp-2.txt;
         sort -u subdomains-temp-2.txt -o subdomains-temp-2.txt;
         grep -vFf exclude-host.txt subdomains-temp-2.txt > hosts-massdns.txt;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/dnsx.sh hosts-massdns.txt;
         mv dnsx.txt dnsx-permutation-brute.txt; mv hosts-live.txt permutation-brute-hosts-live.txt; mv ips-live.txt permutation-brute-ips-live.txt;
         xz -k dnsx-permutation-brute.txt permutation-brute-hosts-live.txt permutation-brute-ips-live.txt;
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: dnsx-artifacts
         path: |
          permutation-brute-hosts-live.txt.xz
      - name: Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=DNSx-Permutation-Brute -F file=@dnsx-permutation-brute.txt.xz;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=DNSx-Permutation-Brute-Hosts-Live -F file=@permutation-brute-hosts-live.txt.xz;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=DNSx-Permutation-Brute-IPs-Live -F file=@permutation-brute-ips-live.txt;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK" ;


  HTTPX:
    if: always()
    needs: DNSx
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: dnsx-artifacts    
      - name: Install Dependencies
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         xz -d permutation-brute-hosts-live.txt.xz;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/httpx.sh permutation-brute-hosts-live.txt;
         cp httpx.out httpx-permutation-brute-resolved-url.txt;
         cat httpx-permutation-brute-resolved-url.txt | cut -d "/" -f 3 > httpx-permutation-brute-resolved-host.txt;
         xz httpx-permutation-brute-resolved-url.txt httpx-permutation-brute-resolved-host.txt;
      - name: Slack
        if: always()
        run: |
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=HTTPX-Permutation-Brute-URL -F file=@httpx-permutation-brute-resolved-url.txt.xz;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=HTTPX-Permutation-Brute-Host -F file=@httpx-permutation-brute-resolved-host.txt.xz;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK" ;
