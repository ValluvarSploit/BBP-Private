name: Recon Small Private
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.DOMAIN_SMALL_PUBLIC }}
      XSS_HUNTER: ${{ secrets.XSS_HUNTER }}
      S_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      S_CHANNEL: ${{ secrets.SLACK_CN_SMALL }}
      S_URL: https://slack.com/api/files.upload
      S_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SMALL }}
jobs:
  http-probe:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2             
      - name: Install Dependencies
        run: |
         echo "$TARGET" > subdomains.txt
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
         chmod +x binaries/httpx; 
         wget --quiet https://github.com/projectdiscovery/httpx/releases/download/v1.0.3/httpx_1.0.3_linux_amd64.tar.gz
         tar -xzvf httpx_1.0.3_linux_amd64.tar.gz ; mv httpx-linux-amd64 httpx
      - name: HTTP Probe
        run: |
         ./httpx -l subdomains.txt -follow-redirects -status-code -vhost -threads 300 -silent > subdomains-resolved-url.txt 
         cat subdomains-resolved-url.txt | cut -d "/" -f 3  > subdomains-resolved-host.txt
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: http-probe-artifacts
         path: |
          subdomains-resolved-url.txt 
          subdomains-resolved-host.txt
      - name: Output & Slack Notification
        if: always()
        run: |        
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-Scopes -F file=@subdomains-resolved-url.txt
         
#Nuclei Template Scan.
  nuclei-scan:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         wget --quiet https://github.com/projectdiscovery/nuclei/releases/download/v2.3.2/nuclei_2.3.2_linux_amd64.tar.gz
         tar -xzvf nuclei_2.3.2_linux_amd64.tar.gz  
      - name: Nuclei scan
        run: |
         ./nuclei -l subdomains-resolved-url.txt -c 100 -stats -silent -t nuclei-templates/ -o nuclie-scan.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"
          if [[ -f nuclie-scan.txt ]]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-Nuclei-Template-Scan -F file=@nuclie-scan.txt; fi

#NMAP Vulnerability Full Scan
  nmap-vulnerability-scan:
    runs-on: ubuntu-latest    
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: |
         ulimit -s ; ulimit -s 65536
         sudo apt-get update && sudo apt-get install nmap -y
         cd /usr/share/nmap/scripts/
         sudo git clone https://github.com/vulnersCom/nmap-vulners.git
         sudo git clone https://github.com/scipag/vulscan
         cd vulscan/utilities/updater/ ; sudo chmod +x updateFiles.sh ; sudo ./updateFiles.sh
      - name: Nmap scan
        run: |
         nmap -Pn -sV -p- --script nmap-vulners,vulscan --script-args vulscandb=scipvuldb.csv -iL subdomains-resolved-host.txt -oN nmap-vulnerability-scan.txt 
         xz nmap-vulnerability-scan.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-Nmap-Vulnerability-Scan -F file=@nmap-vulnerability-scan.txt.xz

#Collect URLs.
  url-collector:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: |
         go env -w GOPATH=~/Downloads
         go get -u github.com/tomnomnom/waybackurls
         go get -u github.com/tomnomnom/gf
         mkdir ~/.gf; cp -r ~/Downloads/src/github.com/tomnomnom/gf/examples ~/.gf
         git clone https://github.com/1ndianl33t/Gf-Patterns
         mv Gf-Patterns/*.json ~/.gf
         cp ~/Downloads/bin/gf . ; cp ~/Downloads/bin/waybackurls .
         chmod +x binaries/gau
      - name: waybackurls & gau
        run: |
         for url in $(cat subdomains-resolved-host.txt); do ./waybackurls "$url" >> waybackurls.txt; done;
         for url in $(cat subdomains-resolved-host.txt); do ./binaries/gau "$url" >> gau.txt; done;
         cat gau.txt | sort -u >> waybackurls.txt
      - name: Patterns
        run: |
         mkdir url-collector-artifacts
         cp waybackurls.txt url-collector-artifacts/
         cat waybackurls.txt | ./gf ssrf | sort -u > url-collector-artifacts/ssrf-params.txt
         cat waybackurls.txt | ./gf sqli | sort -u > url-collector-artifacts/sqli-params.txt
         cat waybackurls.txt | ./gf ssti | sort -u > url-collector-artifacts/ssti-params.txt
         cat waybackurls.txt | ./gf xss | sort -u > url-collector-artifacts/xss-params.txt
         cat waybackurls.txt | ./gf lfi | sort -u > url-collector-artifacts/lfi-params.txt
         cat waybackurls.txt | ./gf rce | sort -u > url-collector-artifacts/rce-params.txt
         cat waybackurls.txt | ./gf redirect | sort -u > url-collector-artifacts/redirect-params.txt
         cat waybackurls.txt | ./gf img-traversal | sort -u > url-collector-artifacts/img-traversal.txt
         zip -r url-collector-artifacts.zip url-collector-artifacts/ ; xz url-collector-artifacts.zip
      - name: Upload URL Collector Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: url-collector-artifacts
         path: url-collector-artifacts/
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-URL-Pattern-Collector -F file=@url-collector-artifacts.zip.xz

#Parameter Discovery
  parameter-discovery:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/devanshbatham/ParamSpider
         cd ParamSpider; pip3 install -r requirements.txt; cd ..
      - name: ParamSpider
        run: for url in $(cat subdomains-resolved-url.txt); do python3 ParamSpider/paramspider.py -d "$url" -l high --exclude woff,css,js,png,svg,php,jpg >> paramspider.txt; done ;
      - name: Upload BBP-Public Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: paramspider-artifacts
         path: paramspider.txt 
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK" 
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-Parameter-Discovery -F file=@paramspider.txt

#XSS Automation
  xss-hunter:
    runs-on: ubuntu-latest
    needs: parameter-discovery
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: paramspider-artifacts        
      - name: Install Dependencies
        run: sudo snap install dalfox       
      - name: Dalfox
        run: dalfox -b "$XSS_HUNTER" file paramspider.txt > xss-vulnerable-urls.txt

      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK" 
          if [[ -f xss-vulnerable-urls.txt ]] ; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-XSS -F file=@xss-vulnerable-urls.txt; fi

#Javascript Scan
  javascript-scan:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts    
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         cd binaries; chmod +x gau subjs hakrawler httpx; cd ..
         git clone https://github.com/GerbenJavado/LinkFinder.git
         cd LinkFinder; sudo python3 setup.py install; sudo pip3 install -r requirements.txt; cd ..
         wget https://raw.githubusercontent.com/m4ll0k/Bug-Bounty-Toolz/master/getjswords.py
         wget https://gist.githubusercontent.com/KathanP19/d2cda2f99c0b60d64b76ee6039b37e47/raw/eb105a4de06502b2732df9d682c61189c3703685/jsvar.sh
      - name: Javascript Scan
        run: |
         for url in $(cat subdomains-resolved-url.txt); do echo "$url" | ./binaries/gau | grep -iE "\.js$" | sort -u >> js-file-links.txt; done;
         for url in $(cat subdomains-resolved-url.txt); do echo "$url" | ./binaries/subjs >> js-file-links.txt; done;
         for url in $(cat subdomains-resolved-url.txt); do echo "$url" | ./binaries/hakrawler -js -depth 2 -scope subs -plain >> js-file-links.txt; done;
         cat js-file-links.txt | ./binaries/httpx -follow-redirects -silent -status-code | grep "[200]" | cut -d ' ' -f1 | sort -u > js-file-links-live.txt;
         for url in $(cat subdomains-resolved-url.txt); do python3 LinkFinder/linkfinder.py -d -i "$url" -o cli >> js-endpoints.txt; done;
         cat js-file-links-live.txt | python3 getjswords.py | sort -u > js-words.txt;
         cat js-file-links-live.txt | while read url ; do bash jsvar.sh $url | sort -u | tee js-xss.txt ; done;
         zip js-scan.zip js-endpoints.txt js-words.txt js-file-links-live.txt js-xss.txt ; xz js-scan.zip
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-JS-Scan -F file=@js-scan.zip.xz ; fi;

#Secrets Finder
  secrets-finder:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts       
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/m4ll0k/SecretFinder.git
         cd SecretFinder; pip3 install -r requirements.txt
      - name: Secrets Finder
        run: |
         cat subdomains-resolved-url.txt | xargs -I %% bash -c 'python3 SecretFinder/SecretFinder.py -i %% -e -o cli' > secret-finder.txt; 
         cat secret-finder.txt | grep 'google_api' -B 1 | sort -u > gmapapi.txt;
         zip secrets.zip secret-finder.txt gmapapi.txt; xz secrets.zip
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"
          if [[ -f secrets.zip ]]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-Secret-Finder -F file=@secrets.zip ; fi

#Directory Fuzzing
  directory-fuzzing:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts       
      - name: Install Dependencies
        run: |
         git clone https://github.com/maurosoria/dirsearch.git
         wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/directory-list-2.3-medium.txt
      - name: Directory Fuzzing
        run: |
         python3 dirsearch/dirsearch.py -l subdomains-resolved-url.txt -t 300 -i 200,201,202,203,204,301,302,303,304 -b -w directory-list-2.3-medium.txt; 
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"
          zip -r dirsearch-dir-reports.zip dirsearch/reports && xz dirsearch-dir-reports.zip        
          curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$BATCH"-Directory-Fuzzing -F filename=dirsearch-dir-reports.zip.xz -F file=@dirsearch-dir-reports.zip.xz

#Fuzz Sensitive Files
  sensitive-files-fuzzing:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts    
      - name: Install Dependencies
        run: |
         git clone https://github.com/maurosoria/dirsearch.git
      - name: Directory Fuzzing
        run: |
         python3 dirsearch/dirsearch.py -l subdomains-resolved-url.txt -t 300 -i 200,201,202,203,204,301,302,303,304 -b -w wordlists/sensitive-wordlist.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"
          zip -r dirsearch-file-reports.zip dirsearch/reports && xz dirsearch-file-reports.zip
          curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$BATCH"-File-Fuzzing -F filename=dirsearch-file-reports.zip.xz -F file=@dirsearch-file-reports.zip.xz

#CORS Scanner
  CORS-scanner:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts       
      - name: Install Dependencies
        run: |
         pip3 install wheel
         sudo apt-get install python3-setuptools
         git clone https://github.com/chenjj/CORScanner.git
         sudo pip3 install -r CORScanner/requirements.txt
      - name: CORS Scanner
        run: python3 CORScanner/cors_scan.py -i subdomains-resolved-url.txt -t 200 > cors.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-CORS-Scanner -F filename=cors.txt -F file=@cors.txt

            #  sql-injection:
            #    runs-on: ubuntu-latest   
            #    needs: url-collector        
            #    steps:
            #      - uses: actions/checkout@v2
            #      - uses: actions/download-artifact@v2
            #        with:
            #         name: url-collector-artifacts
            #      - name: Install Dependencies
            #        run: git clone https://github.com/sqlmapproject/sqlmap.git
            #      - name: sqlmap
            #        run: | 
            #         mkdir sqlmap-output
            #         python3 sqlmap/sqlmap.py -m sqli-params.txt --batch --banner --dbs --output-dir sqlmap-output
            #         zip -r sqlmap-output.zip sqlmap-output                         
            #      - name: Send Files to Slack Channel            
            #        run: if [[ ! -z $(ls -A sqlmap-output) ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-sqlmap -F filename=sqlmap-output.zip -F file=@sqlmap-output.zip; fi 
            #      - name: Job Stauts Slack Notification
            #        if: always()
            #        run: |
            #          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"    

  gochopchop:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts 
      - name: Install Dependencies
        run: |
         sudo chmod +x binaries/gochopchop
         wget https://raw.githubusercontent.com/michelin/ChopChop/master/chopchop.yml
      - name: GoChopChop
        run: |
         ./binaries/gochopchop scan --url-file subdomains-resolved-url.txt --export json --export-filename gochopchop-out
         if [[ -f gochopchop-out.json ]]; then zip gochopchop-out.json.zip gochopchop-out.json; fi;
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"  
          if [[ -f gochopchop-out.json.zip ]]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-GoChopChop -F filename=gochopchop-out.json.zip -F file=@gochopchop-out.json.zip; fi;

  Subdomainizer:
    runs-on: ubuntu-latest              
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts 
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/nsonaniya2010/SubDomainizer.git && pip3 install -r SubDomainizer/requirements.txt            
      - name: Subdomanizer
        run: |
         python3 SubDomainizer/SubDomainizer.py -l subdomains-resolved-url.txt -cop cloud.txt -o subdomains.txt -sop secrets.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"
          zip subdomanizer.zip cloud.txt secrets.txt
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-Subdomainizer -F filename=subdomanizer.zip -F file=@subdomanizer.zip

  nikto-scan:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts 
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install nikto -y
      - name: Nikto Scan
        run: |
         for host in $(cat subdomains-resolved-host.txt) ; do nikto -host $host >> nikto-80-output.txt; done;
         for host in $(cat subdomains-resolved-host.txt) ; do nikto -host $host:443 >> nikto-443-output.txt; done;
         zip nikto-scan.zip nikto-80-output.txt nikto-443-output.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-Nikto-Scan -F filename=nikto-scan.zip -F file=@nikto-scan.zip

#HeartBleed Scanner
  Heartbleed-Scanner:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts       
      - name: HeartBleed Scan
        run: for line in $(cat subdomains-resolved-url.txt) ; do echo "QUIT"|openssl s_client -connect $line:443 2>&1|grep 'server extension "heartbeat" (id=15)' || echo $line- safe >> heartbleed.txt ; done
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"          
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$BATCH"-Heartbleed -F file=@heartbleed.txt
