name: Recon Noisy Methodology
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.DOMAIN }}
      HOST: ${{ secrets.NGROK_URL }}
      AWS_CREDS: ${{ secrets.AWS_CREDENTIALS }}
      GIT_ORG: ${{ secrets.TARGET_GITHUB_ORG }}
      GIT_REPO: ${{ secrets.GIT_REPO_URLS }}
      GIT_TOKEN: ${{ secrets.TOKEN }}
      S_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      WEBHOOK: ${{ secrets.WHOOK_JOB_ALERTS }}
      S_URL: https://slack.com/api/files.upload
      CUSTOM_GIT_CREDS : ${{ secrets.CUSTOM_GIT_CREDENTIALS }}
      CUSTOM_GIT_CONFIG : ${{ secrets.CUSTOM_GIT_CONFIG }}
jobs:
  Subdomain-Takeover:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Subdomain Takeover
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;         
         wget $HOST/httpx-resolved-url.txt; wget $HOST/httpx-resolved-host.txt;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/subdomain_takeover.sh httpx-resolved-url.txt httpx-resolved-host.txt;
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
         name: subdomains-artifacts
         path: |
          httpx-resolved-url.txt
          httpx-resolved-host.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=Subdomain-Takeover -F file=@subdomain-takeover.zip;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";
          
  DNSC:
    if: always()
    runs-on: ubuntu-latest  
    needs: Subdomain-Takeover
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: DNSC
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/dnsc.sh -l httpx-resolved-host.txt -o dnsc.csv;
      - name: Send Output to Slack
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$S_CHANNEL" -F title=DNSC -F file=@dnsc.csv
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";

  MEG:
    if: always()
    runs-on: ubuntu-latest
    needs: [Subdomain-Takeover, DNSC]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: MEG
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/meg.sh httpx-resolved-url.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=MEG -F file=@meg-home.zip;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";



  HeartBleed-Scan:
    if: always()
    runs-on: ubuntu-latest  
    needs: [Subdomain-Takeover, MEG]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: Heartbleed Scan
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/heartbleed-scan.sh httpx-resolved-host.txt;
      - name: Send Output to Slack
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$S_CHANNEL" -F title=HeartBleed-Scan -F file=@heartbleed-scan.txt;
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";


  Aquatone:
    if: always()
    runs-on: ubuntu-latest
    needs: [Subdomain-Takeover, HeartBleed-Scan]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: Aquatone
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/aquatone.sh httpx-resolved-url.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=Aquatone -F file=@aquatone-output.zip.xz ;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";

  Eyewitness:
    if: always()
    runs-on: ubuntu-latest
    needs: [Subdomain-Takeover, Aquatone]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: Eyewitness
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/eyewitness.sh httpx-resolved-url.txt;
      - name: Slack Notification
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=Web-Screenshots -F file=@eyewitness_output.zip.xz ;
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";


  Gochopchop-Scan:
    if: always()
    runs-on: ubuntu-latest
    needs: [Subdomain-Takeover, Eyewitness]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: GoChopChop Scan
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/gochopchop.sh httpx-resolved-url.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
          if [[ -f gochopchop-out.json ]]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=GoChopChop -F file=@gochopchop-out.json; fi;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";

  S3-Scanner:
    if: always()
    runs-on: ubuntu-latest
    needs: [Subdomain-Takeover, Gochopchop-Scan]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: S3 Scanner
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         mkdir ~/.aws; echo "$AWS_CREDS" > ~/.aws/credentials; echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/s3_scanner.sh "$TARGET" httpx-resolved-host.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=S3-Scan -F file=@s3-scan.txt;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";

  Whatweb:
    if: always()
    runs-on: ubuntu-latest  
    needs: [Subdomain-Takeover,S3-Scanner]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: Whatweb Scan
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/whatweb.sh httpx-resolved-host.txt;
      - name: Output to Slack Notification
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$S_CHANNEL" -F title=Whatweb-Scan -F file=@whatweb-logs.json;
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";

  CORS-Scanner:
    if: always()
    runs-on: ubuntu-latest  
    needs: [Subdomain-Takeover,Whatweb]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: CORS Scan
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/cors-scan.sh httpx-resolved-url.txt;
      - name: Send Output to Slack
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$S_CHANNEL" -F title=CORS-Scan -F file=@cors-scan.json;
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";


  Jaeles-Signature-Scan:
    if: always()
    runs-on: ubuntu-latest
    needs: [Subdomain-Takeover,CORS-Scanner]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: Jaeles scan
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/jaeles.sh httpx-resolved-url.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
          if [ -f jaeles.zip ]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=Jaeles-Signature-Scan -F file=@jaeles.zip; fi;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";


  Nuclei-Template-Scan:
    if: always()
    runs-on: ubuntu-latest
    needs: [Subdomain-Takeover,Jaeles-Signature-Scan]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: Nuclei scan
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/nuclei-template-scan.sh httpx-resolved-url.txt beast;
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=Nuclei-Template-Scan -F file=@nuclie-scan.out;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";


  Git-Dorker-Domain:
    if: always()
    runs-on: ubuntu-latest  
    needs: Jaeles-Signature-Scan
    steps:
      - uses: actions/checkout@v2
      - name: Git-Dorker-Domain
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/gitdorker.sh "$TARGET" DOMAIN "$GIT_TOKEN";     
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=Gitdorker-DOMAIN -F file=@git-dorker-domain_gh_dorks.csv.xz;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";


  URL-Enumeration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: URL Enumeration
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/url-enumeration.sh "$TARGET";
      - name: Upload URL Collector Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: url-collector-artifacts
         path: url-collector-artifacts/
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=URL-Enumeration -F file=@url-collector-artifacts.zip.xz;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";

  Javascript-Scan:
    if: always()
    runs-on: ubuntu-latest
    needs: [Subdomain-Takeover,URL-Enumeration]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts     
      - name: Javascript Scan
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/js-scan.sh "$TARGET" httpx-resolved-url.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-JS-Scan -F file=@js-scan.zip.xz;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";

  Secrets-Finder:
    if: always()
    runs-on: ubuntu-latest
    needs: [Subdomain-Takeover,Javascript-Scan]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts     
      - name: Secret Finder
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/secret_finder.sh httpx-resolved-url.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g');
         if [[ -f secrets.zip.xz ]]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=Secret-Finder -F file=@secrets.zip; fi
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";


  Parameter-Discovery:
    if: always()
    runs-on: ubuntu-latest
    needs: [Subdomain-Takeover,Secrets-Finder]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts
      - name: Parameter Discovery
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"Job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials; echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/parameter-discover.sh httpx-resolved-host.txt;
      - name: Upload BBP-Public Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: paramspider-artifacts
         path: paramspider.txt 
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title=Parameter-Discovery -F file=@paramspider.txt;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job *${{ github.job}}* in workflow *${{ github.workflow }}* has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK";
          
     
  Slack-Notification:
    if: always()
    runs-on: ubuntu-latest  
    needs: [Subdomain-Takeover, Nuclei-Template-Scan, URL-Enumeration, Parameter-Discovery, Javascript-Scan, Secrets-Finder, CORS-Scanner, S3-Scanner, Aquatone, Gochopchop-Scan, Git-Dorker-Domain, Eyewitness, MEG]
    steps:
      - uses: actions/checkout@v2
      - name: Slack 
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.workflow}} _*`COMPLETED`*_ - '$TARGET'"}' "$WEBHOOK" ;

