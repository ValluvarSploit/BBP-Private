#Important Note:
# Before running this action, make sure you updated following secrets variables in settings.
#  1. PUBLIC_LARGE_DOMAIN
#       example.com
#  2. Comment out git-dorks jobs if not required.

# Jobs Modules:
#subdomain-enumeration
#subdomain-takeover
#nuclei-scan
#masscan-nmap-scan
#url-collector
#parameter-discovery
#xss-hunter
#javascript-scan
#secrets-finder
#directory-fuzzing
#sensitive-files-fuzzing
#CORS-scanner
#heartbleed-scanner
#sql-injection
#s3-scanner
#aquatone-webscreenshot
#gochopchop
#Subdomainizer
#git-dorker-Domain
name: Recon Large Scope-Public
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.PUBLIC_LARGE_DOMAIN }}
      EXCLUDE_HOST: ${{ secrets.PUBLIC_EXCLUDE_HOST }}
      XSS_HUNTER_URL_TOKEN: ${{ secrets.XSS_HUNTER }}
      AWS_CREDS: ${{ secrets.AWS_CREDENTIALS }}
      GIT_TOKEN: ${{ secrets.TOKEN }}
      SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      SLACK_CHANNEL_NAME: ${{ secrets.PUBLIC_SLACK_CHANNEL_NAME }}
jobs:
  subdomain-enumeration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2             
      - name: Install Dependencies
        run: |
         echo "$EXCLUDE_HOST" > subdomains-exclude.txt
         sudo apt-get install python3-setuptools
         sudo snap install amass
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
         cd binaries; chmod +x assetfinder findomain subfinder httpx; cd ..
         git clone https://github.com/m8r0wn/subscraper
         cd subscraper; sudo python3 setup.py install; cd ..
      - name: SubScraper
        run: python3 subscraper/subscraper.py "$TARGET" -o subdomains-all.txt;
      - name: Amass
        run: amass enum -passive -d "$TARGET" >> subdomains-all.txt;
      - name: Assetfinder
        run: ./binaries/assetfinder --subs-only "$TARGET" -silent >> subdomains-all.txt;          
      - name: Findomain
        run: ./binaries/findomain -t "$TARGET" -q >> subdomains-all.txt; 
      - name: Subfinder
        run: |
         ./binaries/subfinder -d "$TARGET" -all --silent >> subdomains-all.txt
         echo Total Discovered Subdomains: $(cat subdomains-all.txt | wc -l)
      - name: MassDNS
        run: |
         ./binaries/massdns -r resolvers.txt -t A -o S -w massdns-output.txt subdomains-all.txt
         cat massdns-output.txt | awk '{print $1}' | sed 's/.$//' | sort -u > live-hosts.txt
         cat massdns-output.txt | awk '{print $3}' | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort -u  > live-ips.txt
      - name: Unique subdomains
        run: |
         cat subdomains-all.txt | sed 's/\*\.//g' | sort -u > subdomains-uniq.txt
         echo Total Uniq Subdomains: $(cat subdomains-uniq.txt | wc -l)
         grep -vFf subdomains-exclude.txt subdomains-uniq.txt > subdomains.txt
         echo Total Subdomains to do Recon: $(cat subdomains.txt | wc -l)       
      - name: HTTP/HTTPS Resolver
        run: |
         ./binaries/httpx -l subdomains.txt -follow-redirects -status-code -title -cname -vhost -threads 300 -silent -o httpx.log
         cat httpx.log | grep "[200]" | cut -d " " -f 1 | sort -u > subdomains-resolved.txt 
         echo Total Resolved Subdomains: $(cat subdomains-resolved.txt | wc -l)
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
         path: |
           subdomains-resolved.txt 
           live-hosts.txt
           live-ips.txt
      - name: Send Output to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Subdomains -F filename=subdomains-resolved.out -F file=@subdomains-resolved.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-MassDNS-Live-IPs -F filename=live-ips.out -F file=@live-ips.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-MassDNS-Live-Hosts -F filename=live-hosts.out -F file=@live-hosts.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-httpx-logs -F filename=httpx.log -F file=@httpx.log
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-MassDNS-All -F filename=massdns-output.txt -F file=@massdns-output.txt
      
#Subdomain Takeover
  subdomain-takeover:
    runs-on: ubuntu-latest
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         cd binaries; chmod +x subjack subzy nuclei; cd ..
         cat subdomains-resolved.txt | cut -d "/" -f 3 > subdomains.txt
         cp subdomains.txt binaries/
      - name: Subzy
        run: |
         ./binaries/subzy --targets=subdomains-resolved.txt -concurrency 50 | tee subzy-logs.txt
         cat subzy-logs.txt | grep -v "NOT VULNERABLE" > subzy-output.txt
      - name: Subjack
        run: |
         ./binaries/subjack -w subdomains-resolved.txt -t 100 -timeout 30 -o subjack-logs.txt -v -c binaries/subjack_fingerprints.json
         cat subjack-logs.txt | grep -v "Not Vulnerable" | tee subjack-output.txt 
      - name: Nuclei
        run: ./binaries/nuclei -l subdomains-resolved.txt -c 100 -stats -t nuclei-templates/takeovers/subdomain-takeover.yaml -o nuclie-output.txt   
      - name: SubOver
        run: cd binaries; chmod +x SubOver; ./SubOver -l subdomains.txt -o subover.txt; cd ..
      - name: Combine Output Files
        run: |
         cat subzy-logs.txt subjack-logs.txt >> sto.log
         if [[ -f subzy-output.txt ]]; then echo "*****Subzy*****" > subdomain-takeovers.txt; cat subzy-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f subjack-output.txt ]]; then echo "*****Subjack*****" >> subdomain-takeovers.txt; cat subjack-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f nuclie-output.txt ]]; then echo "*****Nuceli*****" >> subdomain-takeovers.txt; cat nuclie-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f subover.txt ]]; then echo "*****SubOver*****" >> subdomain-takeovers.txt; cat subover.txt >> subdomain-takeovers.txt; fi
      - name: Send Output to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Subdomain-Takeover -F filename=subdomain-takeovers.txt -F file=@subdomain-takeovers.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Subdomain-Takeover-Logs -F filename=sto.log -F file=@sto.log
      
#Nuclei Template Scan.
  nuclei-scan:
    runs-on: ubuntu-latest
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         chmod +x binaries/nuclei   
      - name: Nuclei scan
        run: |
         ./binaries/nuclei -l subdomains-resolved.txt -c 500 -stats -silent -t nuclei-templates/ -o nuclie-scan.txt
       #./binaries/nuclei -l subdomains-resolved.txt -c 500 -stats -silent -t nuclei-templates/ -exclude nuclei-templates/fuzzing/wp-plugin-scan.yaml -exclude nuclei-templates/fuzzing/basic-auth-bruteforce.yaml -exclude nuclei-templates/default-credentials/ -o nuclie-scan.txt        
      - name: Send Output to Slack
        run: if [[ -f nuclie-scan.txt ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Nuclei-Template-Scan -F filename=nuclie-scan.txt -F file=@nuclie-scan.txt; fi

  masscan-nmap-scan:
    runs-on: ubuntu-latest    
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
      - name: Install Dependencies
        run: |
         sudo apt-get update && sudo apt-get install nmap -y
         pip install python-libnmap
         sudo apt-get install git gcc make libpcap-dev
         git clone https://github.com/robertdavidgraham/masscan
         cd masscan && make -j && cp bin/masscan ../masscanb              
      - name: Masscan
        run: sudo ./masscanb -iL live-ips.txt --rate 10000 -p0-65535 -oX masscan.xml
      - name: Nmap Scan
        run: python masscan_to_nmap.py masscan.xml | tee -a nmap-masscan.txt      
      - name: Send Output to Slack             
        run: |           
          curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Masscan -F filename=masscan.xml -F file=@masscan.xml
          curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Nmap-Scan -F filename=nmap-scan.out -F file=@nmap-masscan.txt

#Collect URLs.
  url-collector:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: cd binaries; chmod +x waybackurls gau; cd ..
      - name: waybackurls & gau
        run: |
         ./binaries/waybackurls "$TARGET" > waybackurls.txt 
         ./binaries/gau "$TARGET" > gau.txt
         cat gau.txt | sort -u >> waybackurls.txt
      - name: Patterns
        run: |
         mkdir url-collector-artifacts
         cp waybackurls.txt url-collector-artifacts/
         cat waybackurls.txt | sort -u | grep -iE 'access=|admin=|dbg=|debug=|edit=|grant=|test=|alter=|clone=|create=|delete=|disable=|enable=|exec=|execute=|load=|make=|modify=|rename=|reset=|shell=|toggle=|adm=|root=|cfg=|dest=|redirect=|uri=|path=|continue=|url=|window=|next=|data=|reference=|site=|html=|val=|validate=|domain=|callback=|return=|page=|feed=|host=|port=|to=|out=|view=|dir=|show=|navigation=|open=|file=|document=|folder=|pg=|php_path=|style=|doc=|img=|filename=' > url-collector-artifacts/ssrf-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'id=|select=|report=|role=|update=|query=|user=|name=|sort=|where=|search=|params=|process=|row=|view=|table=|from=|sel=|results=|sleep=|fetch=|order=|keyword=|column=|field=|delete=|string=|number=|filter=' > url-collector-artifacts/sqli-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'template=|preview=|id=|view=|activity=|name=|content=|redirect=' > url-collector-artifacts/ssti-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'q=|s=|search=|lang=|keyword=|query=|page=|keywords=|year=|view=|email=|type=|name=|p=|callback=|jsonp=|api_key=|api=|password=|email=|emailto=|token=|username=|csrf_token=|unsubscribe_token=|id=|item=|page_id=|month=|immagine=|list_type=|url=|terms=|categoryid=|key=|l=|begindate=|enddate=' > url-collector-artifacts/xss-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'file=|document=|folder=|root=|path=|pg=|style=|pdf=|template=|php_path=|doc=|page=|name=|cat=|dir=|action=|board=|date=|detail=|download=|prefix=|include=|inc=|locate=|show=|site=|type=|view=|content=|layout=|mod=|conf=|url=' > url-collector-artifacts/lfi-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'daemon=|upload=|dir=|download=|log=|ip=|cli=|cmd=|exec=|command=|execute=|ping=|query=|jump=|code=|reg=|do=|func=|arg=|option=|load=|process=|step=|read=|function|req=|feature=|exe=|module=|payload=|run=|print=' > url-collector-artifacts/rce-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'Lmage_url=|Open=|callback=|cgi-bin/redirect.cgi|cgi-bin/redirect.cgi?|checkout=|checkout_url=|continue=|data=|dest=|destination=|dir=|domain=|feed=|file=|file_name=|file_url=|folder=|folder_url=|forward=|from_url=|go=|goto=|host=|html=|image_url=|img_url=|load_file=|load_url=|login?to=|login_url=|logout=|navigation=|next=|next_page=|out=|page=|page_url=|path=|port=|redir=|redirect=|redirect_to=|redirect_uri=|redirect_url=|reference=|return=|returnTo=|return_path=|return_to=|return_url=|rt=|rurl=|show=|site=|target=|to=|uri=|url=|val=|validate=|view=|window=' > url-collector-artifacts/redirect-params.txt
         cat waybackurls.txt | sort -u | grep -iE '=.*.jpg|=.*.jpeg|=.*.gif|=.*.png' > url-collector-artifacts/img-traversal.txt
         zip -r url-collector-artifacts.zip url-collector-artifacts/
         xz url-collector-artifacts.zip
      - name: Upload URL Collector Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: url-collector-artifacts
         path: url-collector-artifacts/
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-URL-Pattern-Collector -F filename=url-collector-artifacts.zip.xz -F file=@url-collector-artifacts.zip.xz

#Parameter Discovery
  parameter-discovery:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         git clone https://github.com/devanshbatham/ParamSpider
         cd ParamSpider; pip3 install -r requirements.txt; cd ..
      - name: ParamSpider
        run: |
         python3 ParamSpider/paramspider.py -d "$TARGET" -l high -o paramspider.txt --exclude woff,css,js,png,svg,php,jpg;
      - name: Upload BBP-Public Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: paramspider-artifacts
         path: output/paramspider.txt 
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Parameter-Discovery -F filename=paramspider.txt -F file=@output/paramspider.txt
         
#XSS Automation
  xss-hunter:
    runs-on: ubuntu-latest
    needs: parameter-discovery
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: paramspider-artifacts        
      - name: Install Dependencies
        run: sudo snap install dalfox       
      - name: Dalfox
        run: dalfox -b "$XSS_HUNTER_URL_TOKEN" file paramspider.txt > xss-vulnerable-urls.txt
      - name: Send Outputs to Slack
        run: |
         if [[ -f xss-vulnerable-urls.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-XSS -F filename=xss-vulnerable-urls.txt -F file=@xss-vulnerable-urls.txt; fi

#Javascript Scan
  javascript-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2      
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         cd binaries; chmod +x gau subjs hakrawler httpx; cd ..
         git clone https://github.com/GerbenJavado/LinkFinder.git
         cd LinkFinder; sudo python3 setup.py install; sudo pip3 install -r requirements.txt; cd ..
         wget https://raw.githubusercontent.com/m4ll0k/Bug-Bounty-Toolz/master/getjswords.py
         wget https://gist.githubusercontent.com/KathanP19/d2cda2f99c0b60d64b76ee6039b37e47/raw/eb105a4de06502b2732df9d682c61189c3703685/jsvar.sh
      - name: Javascript Scan
        run: |
         echo "$TARGET" | ./binaries/gau | grep -iE "\.js$" | sort -u > js-file-links.txt
         echo "$TARGET" | ./binaries/subjs >> js-file-links.txt
         echo "$TARGET" | ./binaries/hakrawler -js -depth 2 -scope subs -plain >> js-file-links.txt
         cat js-file-links.txt | ./binaries/httpx -follow-redirects -silent -status-code | grep "[200]" | cut -d ' ' -f1 | sort -u > js-file-links-live.txt;
         python3 LinkFinder/linkfinder.py -d -i https://"$TARGET" -o cli >> js-endpoints.txt
         cat js-file-links-live.txt | python3 getjswords.py | sort -u > js-words.txt;
         cat js-file-links-live.txt | while read url ; do bash jsvar.sh $url | sort -u | tee js-xss.txt ; done;
      - name: Send Outputs to Slack
        run: |
         if [[ -f js-file-links-live.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Files-URL -F filename=js-file-links-live.txt -F file=@js-file-links-live.txt; fi;
         if [[ -f js-endpoints.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Endpoints -F filename=js-endpoints.txt -F file=@js-endpoints.txt; fi;
         if [[ -f js-words.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Files-Words -F filename=js-words.txt -F file=@js-words.txt; fi;
         if [[ -f js-xss.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-XSS -F filename=js-xss.txt -F file=@js-xss.txt; fi;

#Secrets Finder
  secrets-finder:
    runs-on: ubuntu-latest
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts       
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/m4ll0k/SecretFinder.git
         cd SecretFinder; pip3 install -r requirements.txt
      - name: Secrets Finder
        run: |
         cat subdomains-resolved.txt | xargs -I %% bash -c 'python3 SecretFinder/SecretFinder.py -i %% -e -o cli' > secret-finder.txt; 
         cat secret-finder.txt | grep 'google_api' -B 1 | sort -u > gmapapi.txt;
      - name: Send Outputs to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Secret-Finder -F filename=secret-finder.txt -F file=@secret-finder.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Gmap-api -F filename=gmapapi.txt -F file=@gmapapi.txt

#Directory Fuzzing
  directory-fuzzing:
    runs-on: ubuntu-latest
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts       
      - name: Install Dependencies
        run: |
         git clone https://github.com/maurosoria/dirsearch.git
         wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/directory-list-2.3-medium.txt
      - name: Directory Fuzzing
        run: |
         python3 dirsearch/dirsearch.py -l subdomains-resolved.txt -t 300 -i 200,201,202,203,204,301,302,303,304 -b -w directory-list-2.3-medium.txt;
         zip -r dirsearch-reports.zip dirsearch/reports && xz dirsearch-reports.zip
      - name: Send Outputs to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Directory-Fuzzing -F filename=dirsearch-reports.zip.xz -F file=@dirsearch-reports.zip.xz

#Dirsearch sensitive files
  sensitive-files-fuzzing:
    runs-on: ubuntu-latest
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts     
      - name: Install Dependencies
        run: git clone https://github.com/maurosoria/dirsearch.git
      - name: Directory Fuzzing
        run: |
         python3 dirsearch/dirsearch.py -l subdomains-resolved.txt -t 300 -i 200,201,202,203,204,301,302,303,304 -b -w wordlists/sensitive-wordlist.txt;
         zip -r dirsearch-reports.zip dirsearch/reports && xz dirsearch-reports.zip
      - name: Send Outputs to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Sensitive-File-Fuzzing -F filename=dirsearch-reports.zip.xz -F file=@dirsearch-reports.zip.xz


#CORS Scanner
  CORS-scanner:
    runs-on: ubuntu-latest
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts       
      - name: Install Dependencies
        run: |
         pip3 install wheel
         sudo apt-get install python3-setuptools
         git clone https://github.com/chenjj/CORScanner.git
         sudo pip3 install -r CORScanner/requirements.txt
      - name: CORS Scanner
        run: python3 CORScanner/cors_scan.py -i subdomains-resolved.txt -t 200 > cors.txt;
      - name: Send Outputs to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-CORS-Scanner -F filename=cors.txt -F file=@cors.txt

#HeartBleed Scanner
  heartbleed-scanner:
    runs-on: ubuntu-latest
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts       
      - name: HeartBleed Scan
        run: cat subdomains-resolved.txt | while read line ; do echo "QUIT"|openssl s_client -connect $line:443 2>&1|grep 'server extension "heartbeat" (id=15)' || echo $line- safe; done
#      - name: Send Outputs to Slack
#        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-CORS-Scanner -F filename=cors.txt -F file=@cors.txt

  sql-injection:
    runs-on: ubuntu-latest   
    needs: url-collector         
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: url-collector-artifacts
      - name: Install Dependencies
        run: git clone https://github.com/sqlmapproject/sqlmap.git
      - name: sqlmap
        run: | 
         mkdir sqlmap-output
         python3 sqlmap/sqlmap.py -m sqli-params.txt --batch --banner --dbs --output-dir sqlmap-output
         zip -r sqlmap-output.zip sqlmap-output                         
      - name: Send Files to Slack Channel            
        run: if [[ ! -z $(ls -A sqlmap-output) ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-sqlmap -F filename=sqlmap-output.zip -F file=@sqlmap-output.zip; fi 

  s3-scanner:
    runs-on: ubuntu-latest
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts 
      - name: Install Dependencies
        run: |
         cat subdomains-resolved.txt | cut -d "/" -f 3 > targets-1.txt
         mkdir ~/.aws
         echo "$AWS_CREDS" > ~/.aws/credentials
         git clone https://github.com/sa7mon/S3Scanner.git
         pip3 install -r S3Scanner/requirements.txt
         for word in $(cat wordlists/bucket-wordist.txt); do echo $word.$TARGET >> targets-2.txt ; done;
         sort -u targets-2.txt -o targets-2.txt
         for word in $(cat wordlists/bucket-wordist.txt); do echo $word-$TARGET >> targets-3.txt ; done;
         sort -u targets-3.txt -o targets-3.txt
      - name: S3 Scanner
        run: |
         python3 S3Scanner/s3scanner.py -l targets-1.txt -o buckets-1.txt
         python3 S3Scanner/s3scanner.py -l targets-2.txt -o buckets-2.txt
         python3 S3Scanner/s3scanner.py -l targets-3.txt -o buckets-3.txt
      - name: Send Outpt to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-S3-Scanner-1 -F filename=buckets-1.txt -F file=@buckets-1.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-S3-Scanner-2 -F filename=buckets-2.txt -F file=@buckets-2.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-S3-Scanner-3 -F filename=buckets-3.txt -F file=@buckets-3.txt
         
  aquatone-webscreenshot:
    runs-on: ubuntu-latest
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts 
      - name: Install Dependencies
        run: chmod +x ./binaries/aquatone
      - name: Aquatone
        run: |
         mkdir aquatone-output
         cat subdomains-resolved.txt | ./binaries/aquatone -out aquatone-output/
         zip -r aquatone-output.zip aquatone-output/ && xz aquatone-output.zip
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Aquatone-Webscreenshot -F filename=aquatone.zip.xz -F file=@aquatone-output.zip.xz     
    
  gochopchop:
    runs-on: ubuntu-latest
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts 
      - name: Install Dependencies
        run: |
         sudo chmod +x binaries/gochopchop
         wget https://raw.githubusercontent.com/michelin/ChopChop/master/chopchop.yml
      - name: GoChopChop
        run: |
         ./binaries/gochopchop scan --url-file subdomains-resolved.txt --export json --export-filename gochopchop-out
         if [[ -f gochopchop-out.json ]]; then zip gochopchop-out.json.zip gochopchop-out.json; fi;
      - name: Send Output to Slack
        run: if [[ -f gochopchop-out.json.zip ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-GoChopChop -F filename=gochopchop-out.json -F file=@gochopchop-out.json; fi;
    
  Subdomainizer:
    runs-on: ubuntu-latest              
    needs: subdomain-enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts 
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/nsonaniya2010/SubDomainizer.git && pip3 install -r SubDomainizer/requirements.txt            
      - name: Subdomanizer
        run: python3 SubDomainizer/SubDomainizer.py -l subdomains-resolved.txt -cop cloud.txt -o subdomains.txt -sop secrets.txt;
      - name: Send Output to Slack
        run: |
         if [[ -f subdomains.txt ]] && [[ `cat subdomains.txt | wc -w` -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Subdomainizer-Subdomains -F filename=subdomainizer-subdomains.txt -F file=@subdomains.txt ; fi
         if [[ -f cloud.txt ]] && [[ `cat secrets.txt | wc -w` -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Subdomainizer-Cloud -F filename=subdomainizer-cloud.txt -F file=@cloud.txt ; fi
         if [[ -f secrets.txt ]] && [[ `cat cloud.txt | wc -w` -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Subdomainizer-Secrets -F filename=subdomainizer-secrets.txt -F file=@secrets.txt ; fi

  git-dorker-Domain:
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/obheda12/GitDorker.git
         pip3 install -r GitDorker/requirements.txt 
      - name: Git-Dorker-Domain
        run: python3 GitDorker/GitDorker.py --dorks GitDorker/Dorks/alldorksv3 -q "$TARGET"  --token "$GITHUB_TOKEN" -o git-dorker-Domain      
      - name: Send Output Files Slack Channel
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Gitdorker-Domain -F filename=git-dorker-Domain.csv -F file=@git-dorker-Domain_gh_dorks.csv   
