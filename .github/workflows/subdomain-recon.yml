name: Subdomain Recon
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.DOMAIN }}
      HOST: ${{ secrets.NGROK_URL }}
      S_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      WEBHOOK: ${{ secrets.WHOOK_JOB_ALERTS }}
      S_URL: https://slack.com/api/files.upload
      CUSTOM_GIT_CREDS : ${{ secrets.CUSTOM_GIT_CREDENTIALS }}
      CUSTOM_GIT_CONFIG : ${{ secrets.CUSTOM_GIT_CONFIG }} 

jobs:
  Subdomain-enum:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Subdomains
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         wget -q $HOST/subdomains-manual.txt;
         GREEN='\033[0;32m'; cat subdomains-manual.txt | head | xargs -n1 echo -e ${GREEN} snipped;
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials;
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;
         bash Domain_Monitoring/scripts/subs.sh "$TARGET";
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
         name: subdomains-artifacts
         path: all-subdomains.txt
      - name: Slack
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK" ;

  HTTPX-1:
    needs: Subdomain-enum
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts    
      - name: Install Dependencies
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         GREEN='\033[0;32m'; cat all-subdomains.txt | head | xargs -n1 echo -e ${GREEN} snipped;
         wget https://github.com/projectdiscovery/httpx/releases/download/v1.0.5/httpx_1.0.5_linux_amd64.tar.gz; tar -xzvf httpx_1.0.5_linux_amd64.tar.gz;       
      - name: HTTPX
        run: |
         ./httpx -l all-subdomains.txt -threads 300 -silent -timeout 15 -o httpx.out;     
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
         name: httpx-artifacts
         path: httpx.out
      - name: Slack
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK" ;

  DNSgen:
    runs-on: ubuntu-latest
    needs: HTTPX-1
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httpx-artifacts
      - name: DNSgen
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         GREEN='\033[0;32m'; cat httpx.out | head | xargs -n1 echo -e ${GREEN} snipped;
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials;
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git;       
         bash Domain_Monitoring/scripts/dnsgen.sh httpx.out;
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
         name: dnsgen-artifacts
         path: |
          dnsgen-wordlist.txt.xz
          httpx-resolved.txt
      - name: Slack
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK" ;

  MassDNS:
    runs-on: ubuntu-latest
    needs: DNSgen
    steps:
      - uses: actions/checkout@v2 
      - uses: actions/download-artifact@v2
        with:
         name: dnsgen-artifacts
      - name: MassDNS
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials;
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig;
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git   ;      
         bash Domain_Monitoring/scripts/massdns.sh "$TARGET";
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
         name: dnsgen-artifacts
         path: |
          dnsgen-wordlist.txt.xz
          httpx-resolved.txt
      - name: Slack
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK" ;

  HTTPX-2:
    needs: MassDNS
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomains-artifacts    
      - name: Install Dependencies
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`Started`*_  - '$TARGET'"}' "$WEBHOOK";
         wget https://github.com/projectdiscovery/httpx/releases/download/v1.0.5/httpx_1.0.5_linux_amd64.tar.gz; tar -xzvf httpx_1.0.5_linux_amd64.tar.gz;       
         xz -d subdomains.txt.xz;
      - name: HTTPX
        run: |
         ./httpx -l subdomains.txt -threads 300 -silent -timeout 15 -o resolved-subdomains.txt;
         xz resolved-subdomains.txt
      - name: Slack
        if: always()
        run: |
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-MassDNS-Hosts -F file=@resolved-subdomains.txt.xz;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$WEBHOOK" ;
