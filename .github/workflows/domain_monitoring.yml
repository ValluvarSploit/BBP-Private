name: Domain Monitor
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.DOMAIN_LARGE_PRIVATE }}
      EXCLUDE_HOST: ${{ secrets.DOMAIN_PRIVATE_EXCLUDE_HOST }}
      HOST: ${{ secrets.NGROK_URL }}
      XSS_HUNTER: ${{ secrets.XSS_HUNTER }}
      AWS_CREDS: ${{ secrets.AWS_CREDENTIALS }}
      GIT_USERS: ${{ secrets.TARGET_GITHUB_USERS_LIST }}
      GIT_ORG: ${{ secrets.TARGET_GITHUB_ORG }}
      GIT_TOKEN: ${{ secrets.TOKEN }}
      S_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      S_CHANNEL: ${{ secrets.SLACK_CN_PRIVATE }}
      S_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PRIVATE }}
      S_URL: https://slack.com/api/files.upload
jobs:
  Subdomain-Enumeration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2         
      - name: Install Dependencies
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.workflow }} STARTED - '$TARGET'"}' "$S_WEBHOOK" ;
         wget $HOST/subdomains-manual.txt && wget $HOST/ips-manual.txt ;
         sudo apt-get install python3-setuptools ;
         wget --quiet https://github.com/OWASP/Amass/releases/download/v3.11.13/amass_linux_amd64.zip ; unzip amass_linux_amd64.zip 
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt ;
         chmod +x binaries/assetfinder ;
         wget --quiet https://github.com/Findomain/Findomain/releases/download/4.0.1/findomain-linux -O findomain ; chmod +x findomain
         wget --quiet https://github.com/projectdiscovery/subfinder/releases/download/v2.4.7/subfinder_2.4.7_linux_amd64.tar.gz ; tar -xzvf subfinder_2.4.7_linux_amd64.tar.gz ;
         git clone https://github.com/m8r0wn/subscraper ; cd subscraper; sudo python3 setup.py install; cd .. ;
      - name: SubScraper
        run: python3 subscraper/subscraper.py "$TARGET" -o subdomains-auto.txt ;
      - name: Amass
        run: |
         ./amass_linux_amd64/amass enum -passive -d "$TARGET" -rf resolvers.txt > amass-passive.txt ;
         cat amass-passive.txt >> subdomains-auto.txt ;
      - name: Assetfinder
        run: ./binaries/assetfinder --subs-only "$TARGET" -silent >> subdomains-auto.txt;  
      - name: Subfinder
        run: |
         ./subfinder -d "$TARGET" -all -o subfinder-key.txt -rL resolvers.txt ; 
         cat subfinder-key.txt >> subdomains-auto.txt
      - name: Findomain
        run: |
         ./findomain -t "$TARGET" -q >> subdomains-auto.txt; 
         cat subdomains-auto.txt | sort -u >> subdomains-cleaned.txt ;
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
         path: |
          subdomains-manual.txt
          ips-manual.txt
      - name: Job Status Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;

  DNSgen:
    runs-on: ubuntu-latest
    needs: Subdomain-Enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
      - name: Install Dependencies
        run: pip3 install dnsgen && cp ~/.local/bin/dnsgen . ;
      - name: DNSgen
        run: |
         ./dnsgen subdomains-manual.txt > dnsgen-wordlist.txt ;
         xz dnsgen-wordlist.txt ;
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
         name: dnsgen-artifacts
         path: |
          dnsgen-wordlist.txt.xz
          subdomains-manual.txt
          ips-manual.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-DNSgen -F file=@dnsgen-wordlist.txt.xz ;

  MassDNS-Resolver:
    runs-on: ubuntu-latest
#    needs: [Subdomain-Enumeration]
    needs: [DNSgen,Subdomain-Enumeration]
    steps:
      - uses: actions/checkout@v2 
      - uses: actions/download-artifact@v2
        with:
#         name: subdomain-enumeration-artifacts
         name: dnsgen-artifacts
      - name: Install Dependencies
        run: |
         echo "$EXCLUDE_HOST" > subdomains-exclude.txt ;
         cd wordlists ;
         xz -d subdomains-w{1..2}.txt.xz subdomains-1m-{1..13}.txt.xz ;
         wget https://wordlists-cdn.assetnote.io/data/automated/httparchive_subdomains_2021_03_28.txt -O httparchive.txt
         cat subdomains-w{1..2}.txt bitquark-subdomains-top100000.txt subdomains-1m-{1..13}.txt httparchive.txt > ../subdomain-wordlists.txt ;
         cd .. ;
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt ;
         xz -d dnsgen-wordlist.txt.xz
         wget --quiet https://github.com/projectdiscovery/dnsx/releases/download/v1.0.2/dnsx_1.0.2_linux_amd64.tar.gz ; tar -xzvf dnsx_1.0.2_linux_amd64.tar.gz
      - name: MassDNS
        run: |
         sed "s/$/.$TARGET/" subdomain-wordlists.txt > wordlist-hugh.txt ;
         cat dnsgen-wordlist.txt >> wordlist-hugh.txt
         cat wordlist-hugh.txt | sed 's/\*\.//g' | sort -u > wordlist-hugh2.txt
         grep -vFf subdomains-exclude.txt wordlist-hugh2.txt > wordlist-all.txt ;
         ./binaries/massdns -r resolvers.txt -t A -o S -w massdns-output.txt wordlist-all.txt ;
         cat massdns-output.txt | awk '{print $1}' | sed 's/.$//' | tr A-Z a-z | sort -u > live-hosts.txt ;
         cat subdomains-manual.txt >> live-hosts.txt ; sort -u live-hosts.txt -o live-hosts.txt
         ./dnsx -l live-hosts.txt -resp-only -silent -r resolvers.txt -o live-ips.txt
         cat ips-manual.txt >> live-ips.txt ; sort -u live-ips.txt -o live-ips.txt
         zip massdns-output.zip massdns-output.txt live-ips.txt ; xz massdns-output.zip ;
       #dnsx -l airbnb-subs.txt -wd airbnb.com -o output.txt (wildcard domain)
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: massdns-artifacts
         path: |
          live-hosts.txt
          subdomains-manual.txt
          live-ips.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-MassDNS -F file=@massdns-output.zip.xz ;
                   
  HTTProber:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, MassDNS-Resolver]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: massdns-artifacts
      - name: Install Dependencies
        run: |
         echo "$EXCLUDE_HOST" > subdomains-exclude.txt ;
         cat live-hosts.txt >> subdomains-manual.txt ;
         cat subdomains-manual.txt | sed 's/\*\.//g' | sort -u > subdomains-uniq.txt ;
         grep -vFf subdomains-exclude.txt subdomains-uniq.txt > subdomains-uniq2.txt ;
         cat subdomains-uniq2.txt | tr A-Z a-z | sort -u > subdomains.txt ;
         chmod +x binaries/httprobe
         wget --quiet https://github.com/projectdiscovery/httpx/releases/download/v1.0.5/httpx_1.0.5_linux_amd64.tar.gz ; tar -xzvf httpx_1.0.5_linux_amd64.tar.gz ;
      - name: HTTProber
        run: |
         cat subdomains.txt | ./binaries/httprobe | tee subdomains-resolved.txt ;
         xz -k subdomains-resolved.txt 
         ./httpx -l subdomains.txt -follow-redirects -status-code -vhost -content-length -cname -cdn -csp-probe -ip -web-server -location -websocket -title -tech-detect -no-fallback -threads 300 -silent -timeout 15 -o httpx-enum.txt
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: httprober-artifacts
         path: |
          subdomains-resolved.txt 
          live-ips.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Subdomain-Resolved -F file=@subdomains-resolved.txt.xz ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-HTTPX -F file=@httpx-enum.txt ;

