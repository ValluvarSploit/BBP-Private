#  1. DOMAIN_LARGE_PRIVATE
#       example.com
#  2. NGROK_URL
#       ngrok.io
name: Recon Large Private
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.DOMAIN_LARGE_PRIVATE }}
      EXCLUDE_HOST: ${{ secrets.PRI_EXCLUDE_HOST }}
      HOST: ${{ secrets.NGROK_URL }}
      XSS_HUNTER: ${{ secrets.XSS_HUNTER }}
      AWS_CREDS: ${{ secrets.AWS_CREDENTIALS }}
      GIT_USERS: ${{ secrets.TARGET_GITHUB_USERS_LIST }}
      GIT_ORG: ${{ secrets.TARGET_GITHUB_ORG }}
      GIT_TOKEN: ${{ secrets.TOKEN }}
      S_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      S_CHANNEL: ${{ secrets.SLACK_CN_PRIVATE }}
      S_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PRIVATE }}
      S_URL: https://slack.com/api/files.upload
jobs:
  Subdomain-Enumeration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2         
      - name: Install Dependencies
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.workflow }} STARTED - '$TARGET'"}' "$S_WEBHOOK"
         wget $HOST/subdomains-manual.txt
         wget $HOST/ips-manual.txt         
         sudo apt-get install python3-setuptools
         sudo snap install amass
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
         cd binaries; chmod +x assetfinder findomain subfinder; cd ..
         git clone https://github.com/m8r0wn/subscraper
         cd subscraper; sudo python3 setup.py install; cd ..
      - name: SubScraper
        run: python3 subscraper/subscraper.py "$TARGET" -o subdomains-auto.txt;
      - name: Amass
        run: |
         amass enum -passive -d "$TARGET" -rf resolvers.txt > amass-passive.txt
         cat amass-passive.txt >> subdomains-auto.txt;
      - name: Assetfinder
        run: ./binaries/assetfinder --subs-only "$TARGET" -silent >> subdomains-auto.txt;          
      - name: Findomain
        run: |
         ./binaries/findomain -t "$TARGET" -q >> subdomains-auto.txt; 
         cat subdomains-auto.txt >> subdomains-manual.txt
         sort -u subdomains-manual.txt -o subdomains-manual.txt
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
         path: |
          subdomains-manual.txt
          ips-manual.txt
      - name: Job Stauts Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          
  DNSgen:
    runs-on: ubuntu-latest
    needs: Subdomain-Enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
      - name: Install Dependencies
        run: pip3 install dnsgen && cp ~/.local/bin/dnsgen .
      - name: DNSgen
        run: |
         ./dnsgen subdomains-manual.txt > dnsgen-wordlist.txt  
         xz dnsgen-wordlist.txt
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
         name: dnsgen-artifacts
         path: |
          dnsgen-wordlist.txt.xz 
          subdomains-manual.txt
          ips-manual.txt
      - name: Job Stauts Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
       
  MassDNS-Resolver:
    runs-on: ubuntu-latest
    needs: [DNSgen,Subdomain-Enumeration]
    steps:
      - uses: actions/checkout@v2 
      - uses: actions/download-artifact@v2
        with:
         name: dnsgen-artifacts
      - name: Install Dependencies
        run: |
         echo "$EXCLUDE_HOST" > subdomains-exclude.txt
         cd wordlists
         xz -d subdomains-w{1..2}.txt.xz subdomains-1m-{1..13}.txt.xz 
         cat subdomains-w{1..2}.txt bitquark-subdomains-top100000.txt subdomains-1m-{1..13}.txt > ../subdomain-wordlists.txt ;
         cd ..
         sort -u subdomain-wordlists.txt -o subdomain-wordlists.txt
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
         xz -d dnsgen-wordlist.txt.xz
      - name: MassDNS
        run: |
         sed "s/$/.$TARGET/" subdomain-wordlists.txt > wordlist-hugh.txt
         cat dnsgen-wordlist.txt >> wordlist-hugh.txt
         sort -u wordlist-hugh.txt -o wordlist-hugh.txt
         grep -vFf subdomains-exclude.txt wordlist-hugh.txt > wordlist-all.txt
         ./binaries/massdns -r resolvers.txt -t A -o S -w massdns-output.txt wordlist-all.txt
         cat massdns-output.txt | awk '{print $1}' | sed 's/.$//' | tr A-Z a-z | sort -u > live-hosts.txt
         cat massdns-output.txt | awk '{print $3}' | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort -u  > live-ips.txt
         cat ips-manual.txt >> live-ips.txt
         sort -u live-ips.txt -o live-ips.txt
         zip massdns-output.zip massdns-output.txt live-ips.txt ; xz massdns-output.zip
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: massdns-artifacts
         path: |
          live-hosts.txt
          live-ips.txt
          subdomains-manual.txt
      - name: Job Stauts Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-MassDNS -F file=@massdns-output.zip.xz
                 
  HTTProber:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, MassDNS-Resolver]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: massdns-artifacts
      - name: Install Dependencies
        run: |
         echo "$EXCLUDE_HOST" > subdomains-exclude.txt
         cat live-hosts.txt >> subdomains-manual.txt;
         cat subdomains-manual.txt | sed 's/\*\.//g' | sort -u > subdomains-uniq.txt
         grep -vFf subdomains-exclude.txt subdomains-uniq.txt > subdomains-uniq2.txt
         cat subdomains-uniq2.txt | tr A-Z a-z | sort -u > subdomains.txt
         wget --quiet https://github.com/projectdiscovery/httpx/releases/download/v1.0.3/httpx_1.0.3_linux_amd64.tar.gz
         tar -xzvf httpx_1.0.3_linux_amd64.tar.gz
      - name: HTTProber
        run: |
         ./httpx -l subdomains.txt -follow-redirects -status-code -title -cname -vhost -threads 300 -silent -o httpx.log
         cat httpx.log | cut -d " " -f 1 | sort -u > subdomains-resolved.txt 
         zip httpx.zip httpx.log subdomains-resolved.txt ; xz httpx.zip
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: httprober-artifacts
         path: |
          subdomains-resolved.txt 
          live-ips.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-httpx -F file=@httpx.zip.xz

#Subdomain Takeover
  Subdomain-Takeover:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         touch subjack-logs.txt;
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         cd binaries; chmod +x subjack subzy; cd ..
         cat subdomains-resolved.txt | cut -d "/" -f 3 > subdomains.txt
         cp subdomains.txt binaries/
         wget --quiet https://github.com/projectdiscovery/nuclei/releases/download/v2.3.2/nuclei_2.3.2_linux_amd64.tar.gz
         tar -xzvf nuclei_2.3.2_linux_amd64.tar.gz
      - name: Subzy
        run: |
         ./binaries/subzy --targets=subdomains-resolved.txt -concurrency 50 | tee subzy-logs.txt
         cat subzy-logs.txt | grep -v "NOT VULNERABLE" > subzy-output.txt
      - name: Subjack
        run: |
         ./binaries/subjack -w subdomains-resolved.txt -t 100 -timeout 30 -o subjack-logs.txt -v -c binaries/subjack_fingerprints.json
         cat subjack-logs.txt | grep -v "Not Vulnerable" | tee subjack-output.txt 
      - name: Nuclei
        run: ./nuclei -l subdomains-resolved.txt -c 100 -stats -t nuclei-templates/takeovers -o nuclie-output.txt   
      - name: SubOver
        run: cd binaries; chmod +x SubOver; ./SubOver -l subdomains.txt -o subover.txt; cd ..
      - name: Combine Output Files
        run: |
         cat subzy-logs.txt subjack-logs.txt >> sto.log
         if [[ -f subzy-output.txt ]]; then echo "*****Subzy*****" > subdomain-takeovers.txt; cat subzy-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f subjack-output.txt ]]; then echo "*****Subjack*****" >> subdomain-takeovers.txt; cat subjack-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f nuclie-output.txt ]]; then echo "*****Nuceli*****" >> subdomain-takeovers.txt; cat nuclie-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f subover.txt ]]; then echo "*****SubOver*****" >> subdomain-takeovers.txt; cat subover.txt >> subdomain-takeovers.txt; fi
         zip subdomain-takeover.zip subdomain-takeovers.txt sto.log ; xz subdomain-takeover.zip;
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Subdomain-Takeover -F file=@subdomain-takeover.zip.xz

#Nuclei Template Scan.
  Nuclei-Template-Scan:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         wget --quiet https://github.com/projectdiscovery/nuclei/releases/download/v2.3.2/nuclei_2.3.2_linux_amd64.tar.gz
         tar -xzvf nuclei_2.3.2_linux_amd64.tar.gz 
      - name: Nuclei scan
        run: |
         ./nuclei -l subdomains-resolved.txt -c 100 -stats -silent -t nuclei-templates/ -o nuclie-scan.txt
         xz nuclie-scan.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          if [[ -f nuclie-scan.txt.xz ]]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Nuclei-Template-Scan -F file=@nuclie-scan.txt.xz; fi

  Mass-Nmap-Scan:
    runs-on: ubuntu-latest    
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         sudo apt-get update && sudo apt-get install nmap -y
         pip install python-libnmap
         sudo apt-get install git gcc make libpcap-dev
         git clone https://github.com/robertdavidgraham/masscan
         cd masscan && make -j && cp bin/masscan ../masscanb              
      - name: Masscan
        run: |
         sudo ./masscanb -iL live-ips.txt --rate 10000 -p0-65535 -oX masscan.xml
      - name: Nmap Scan
        run: |
         python masscan_to_nmap.py masscan.xml | tee -a nmap-masscan.txt      
         zip masscan-nmap.zip masscan.xml nmap-masscan.txt 
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: nmap-output
         path: nmap-masscan.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Masscan -F file=@masscan-nmap.zip

  Nmap-Vulnerability-Scan:
    runs-on: ubuntu-latest    
    needs: [Mass-Nmap-Scan, Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: nmap-output
      - name: Install Dependencies
        run: |
         ulimit -s ; ulimit -s 65536
         cat nmap-masscan.txt | grep "Getting ready to scan" | cut -d " " -f 5 > ips.txt
         cat nmap-masscan.txt | grep "Getting ready to scan" | cut -d " " -f 8 > ports.txt
         sudo apt-get update && sudo apt-get install nmap -y
         cd /usr/share/nmap/scripts/
         sudo git clone https://github.com/vulnersCom/nmap-vulners.git
         sudo git clone https://github.com/scipag/vulscan
         cd vulscan/utilities/updater/ ; sudo chmod +x updateFiles.sh ; sudo ./updateFiles.sh
      - name: Nmap scan
        run: |
         exec 3<ips.txt ; exec 4<ports.txt ; while IFS= read -r ip <&3 ; IFS= read -r port <&4 ; do nmap -Pn -sV -p $port --script nmap-vulners,vulscan --script-args vulscandb=scipvuldb.csv -oN nmap-vulnerability-scan.txt $ip  ; done ;
         xz nmap-vulnerability-scan.txt
      - name: Job Stauts Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Nmap-Vulnerability-Scan -F file=@nmap-vulnerability-scan.txt.xz

#Collect URLs.
  URL-Enumeration:
    runs-on: ubuntu-latest
    needs: Subdomain-Enumeration
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         go env -w GOPATH=~/Downloads
         go get -u github.com/tomnomnom/waybackurls
         go get -u github.com/tomnomnom/gf
         mkdir ~/.gf; cp -r ~/Downloads/src/github.com/tomnomnom/gf/examples ~/.gf
         git clone https://github.com/1ndianl33t/Gf-Patterns
         mv Gf-Patterns/*.json ~/.gf
         cp ~/Downloads/bin/gf . ; cp ~/Downloads/bin/waybackurls .
         chmod +x binaries/gau
      - name: waybackurls & gau
        run: |
         ./waybackurls "$TARGET" > waybackurls.txt 
         ./binaries/gau "$TARGET" > gau.txt
         cat gau.txt | sort -u >> waybackurls.txt
      - name: Patterns
        run: |
         mkdir url-collector-artifacts
         cp waybackurls.txt url-collector-artifacts/
         cat waybackurls.txt | ./gf ssrf | sort -u > url-collector-artifacts/ssrf-params.txt
         cat waybackurls.txt | ./gf sqli | sort -u > url-collector-artifacts/sqli-params.txt
         cat waybackurls.txt | ./gf ssti | sort -u > url-collector-artifacts/ssti-params.txt
         cat waybackurls.txt | ./gf xss | sort -u > url-collector-artifacts/xss-params.txt
         cat waybackurls.txt | ./gf lfi | sort -u > url-collector-artifacts/lfi-params.txt
         cat waybackurls.txt | ./gf rce | sort -u > url-collector-artifacts/rce-params.txt
         cat waybackurls.txt | ./gf redirect | sort -u > url-collector-artifacts/redirect-params.txt
         cat waybackurls.txt | ./gf img-traversal | sort -u > url-collector-artifacts/img-traversal.txt
         zip -r url-collector-artifacts.zip url-collector-artifacts/ ; xz url-collector-artifacts.zip
      - name: Upload URL Collector Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: url-collector-artifacts
         path: url-collector-artifacts/
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Pattern-Collector -F file=@url-collector-artifacts.zip.xz

