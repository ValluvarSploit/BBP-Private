#Stage 1
#Important Note:
# Before running this action, make sure you updated following secrets variables in settings.
#  1. TARGET_DOMAIN    , formtat below
#       example.com
#  2. TARGET_IGNORE_HOSTS    , format below     (update any if no hosts to ignore)
#       https://docs.example.com
#  3. TARGET_IGNORE_IPS    , format below       (update any if no IPs to ignore)
#       0.0.0.0

# Workflow Dependency: No
 
name: Subdomain Enumeration
 
on:
  workflow_dispatch:

jobs:
  subdomain-enumeration:
    runs-on: ubuntu-latest
    env:
                 SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
                 SLACK_CHANNEL_NAME: ${{ secrets.SLACK_CHANNEL_NAME }}
                 TARGET_DOMAIN: ${{ secrets.TARGET_DOMAIN }} 
                 TARGET_IGNORE_HOSTS: $ {{ secrets.TARGET_IGNORE_HOSTS_LIST }}
                 TARGET_IGNORE_IPS: $ {{ secrets.TARGET_IGNORE_IPS_LIST }}
    
    steps:
      - uses: actions/checkout@v2
       
      # Assetfinder, Amass, Sublist3r, censys-subdomain-finder, jq, findomain, subfinder, httprobe,dnsgen, resolvers.txt, massdns
      - name: Install Dependencies
        run: |
                 go get -u github.com/tomnomnom/assetfinder && cp /home/runner/go/bin/assetfinder .
                 wget https://github.com/projectdiscovery/httpx/releases/download/v1.0.3/httpx_1.0.3_linux_amd64.tar.gz
                 tar -xvf httpx_1.0.3_linux_amd64.tar.gz
                 sudo snap install amass
                 git clone https://github.com/aboul3la/Sublist3r.git
                 pip install -r Sublist3r/requirements.txt
                 git clone https://github.com/christophetd/censys-subdomain-finder.git
                 pip install -r censys-subdomain-finder/requirements.txt
                 wget --quiet https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
                 mv jq-linux64 jq && chmod +x jq
                 wget --quiet https://github.com/Findomain/Findomain/releases/download/2.1.5/findomain-linux
                 mv findomain-linux findomain && chmod +x findomain
                 wget --quiet https://github.com/projectdiscovery/subfinder/releases/download/v2.4.5/subfinder_2.4.5_linux_amd64.tar.gz
                 tar -xzvf subfinder_2.4.5_linux_amd64.tar.gz
                 pip3 install dnsgen && cp ~/.local/bin/dnsgen .
                 wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
                 git clone https://github.com/blechschmidt/massdns.git
                 cd massdns/ && make
         
      - name: Sublist3r
        run: |
                 python Sublist3r/sublist3r.py -d "$TARGET_DOMAIN" -p 80,443,21,22 -o subdomains-tools-output.txt >/dev/null
         
      - name: Amass
        run: |
                 amass enum -passive -d "$TARGET_DOMAIN" >> subdomains-tools-output.txt
         
      - name: Assetfinder
        run: |
                 ./assetfinder --subs-only "$TARGET_DOMAIN" -silent >> subdomains-tools-output.txt
         
      - name: Censys
        env:
                 CENSYS_API_ID: ${{ secrets.CENSYS_API_ID }}
                 CENSYS_API_SECRET: ${{ secrets.CENSYS_API_SECRET }}
        run: |
                 python censys-subdomain-finder/censys_subdomain_finder.py --censys-api-id "$CENSYS_API_ID" --censys-api-secret "$CENSYS_API_SECRET" "$TARGET_DOMAIN" | cut -d ' ' -f4 >> subdomains-tools-output.txt
                
      - name: Security Trails
        env:
                 SECURITY_TRAILS_API_KEY: ${{ secrets.SECURITY_TRAILS_API_KEY }}
        run: |
                 curl -s --request GET --url https://api.securitytrails.com/v1/domain/"$TARGET_DOMAIN"/subdomains?apikey="$SECURITY_TRAILS_API_KEY" | ./jq '.subdomains[]' | sed 's/\"//g' >test.txt 2>/dev/null && sed "s/$/."$TARGET_DOMAIN"/" test.txt | sed 's/ //g' && rm test.txt >> subdomains-tools-output.txt
                
      - name: Certspotter
        run: |
                 curl -s https://certspotter.com/api/v0/certs\?domain\="$TARGET_DOMAIN" | ./jq '.[].dns_names[]' | sed 's/\"//g' | sed 's/\*\.//g' | grep "$TARGET_DOMAIN" >> subdomains-tools-output.txt
                
      - name: RapidDNS
        run: |
                 curl -s "https://rapiddns.io/subdomain/"$TARGET_DOMAIN"?full=1" | grep -oP '_blank">\K[^<]*' | grep -v http >> subdomains-tools-output.txt
         
      - name: Crt.sh
        run: |
                 curl https://crt.sh/?q=%."$TARGET_DOMAIN" | grep "$TARGET_DOMAIN" | cut -d '>' -f2 | cut -d '<' -f1 | grep -v " " | uniq >> subdomains-tools-output.txt
                
      - name: Findomain
        run: |
                 ./findomain -t "$TARGET_DOMAIN" -q >> subdomains-tools-output.txt
                
      - name: Subfinder
        run: |
                 ./subfinder -d "$TARGET_DOMAIN" -all --silent >> subdomains-tools-output.txt
                
      - name: Unique subdomains
        run: |
                 echo "$TARGET_IGNORE_HOSTS" > ignore-hosts.txt
                 mv subdomains-tools-output.txt temp_file1.txt
                 cat temp_file1.txt | sed 's/\*\.//g' > temp_file2.txt
                 sort -u temp_file2.txt -o temp_file2.txt
                 grep -vf ignore-hosts.txt temp_file2.txt > subdomains-tools-output.txt
            
      - name: dnsgen
        run: |
                 ./dnsgen subdomains-tools-output.txt >> dnsgen-temp-output.txt
                 cat dnsgen-temp-output.txt | grep -v "www" > dnsgen-output.txt
                 cat dnsgen-output.txt | wc -l
              
      - name: Create Wordlists
        run: |
                 sed "s/$/.$TARGET_DOMAIN/" wordlists/subdomain-wordlists.txt > custom-wordlist.txt
                 cat dnsgen-output.txt >> custom-wordlist.txt && sort -u custom-wordlist.txt -o custom-wordlist.txt
                 grep -vf ignore-hosts.txt custom-wordlist.txt > custom2-wordlist.txt
                 cat subdomains-tools-output.txt custom2-wordlist.txt > massdns-input.txt
                 cat custom-wordlist.txt | wc -l
                 
      - name: DNS Resolver-MassDNS
        run: |
                 ./massdns/bin/massdns -r resolvers.txt -t A -o S -w massdns-output.txt massdns-input.txt
                 cat massdns-output.txt | awk '{print $1}' | sed 's/.$//' | sort -u > live-hosts-temp-output.txt
                 cat massdns-output.txt | awk '{print $3}' | sort -u | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" > live-ips-output-temp.txt
                 echo "$TARGET_IGNORE_IPS" > ignore-ips.txt
                 grep -vf ignore-ips.txt live-ips-output-temp.txt > live-ips-output.txt
                 tr A-Z a-z < live-hosts-temp-output.txt | tee live-hosts-output.txt
                 sort -u live-hosts-output.txt -o live-hosts-output.txt
               
      - name: Send FIles to Slack Channel-1
        run: |
                 curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomains-Tools-Results -F filename="$TARGET_DOMAIN"-tools-subdomains.txt -F file=@subdomains-tools-output.txt
                 curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-MassDNS-Live-Hosts-Results -F filename="$TARGET_DOMAIN"-live-hosts.txt -F file=@live-hosts-output.txt
                 curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-MassDNS-Live-IPs-Results -F filename="$TARGET_DOMAIN"-live-ips.txt -F file=@live-ips-output.txt  
                 
      - name: HTTP/HTTPS Resolver-httpx
        run: |
                 ./httpx -l live-hosts-output.txt -o live-httpx-subdomains-raw-output.txt -threads 10000 -silent -stats -cname
                 cat live-httpx-subdomains-raw-output.txt | awk '{print $1}' >> live-httpx-subdomains-output.txt
                 cat live-httpx-subdomains-output.txt | cut -d "/" -f 3 | tee -a live-httpx-subdomains-hosts-output.txt
                 
      - name: Send Files to Slack Channel-2
        run: |
                 curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-httpx-HTTP-Resolved-Results-Raw -F filename="$TARGET_DOMAIN"-http-resolved-raw.txt -F file=@live-httpx-subdomains-raw-output.txt
                 curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-httpx-HTTP-Resolved-Url-Results -F filename="$TARGET_DOMAIN"-http-resolved.txt -F file=@live-httpx-subdomains-output.txt
                 curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-httpx-HTTP-Resolved-Hosts-Results -F filename="$TARGET_DOMAIN"-http-resolved-hosts.txt -F file=@live-httpx-subdomains-hosts-output.txt
