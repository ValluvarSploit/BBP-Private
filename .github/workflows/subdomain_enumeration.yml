#Important Note:
# Before running this action, make sure you updated following secrets variables in settings.
#  1. DOMAIN
#       example.com
#  2. DOMAIN_IGNORE_HOSTS
#       https://docs.example.com
#  3. DOMAIN_IGNORE_IPS
#       0.0.0.0

name: Subdomain Enumeration
 
on:
  workflow_dispatch:

env:
     TARGET_DOMAIN: ${{ secrets.DOMAIN }} 
     TARGET_IGNORE_HOSTS: $ {{ secrets.DOMAIN_IGNORE_HOSTS }}
     TARGET_IGNORE_IPS: $ {{ secrets.DOMAIN_IGNORE_IPS }}
     SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
     SLACK_CHANNEL_NAME: ${{ secrets.SLACK_PRIVATE_BB_CHANNEL_NAME }}


jobs:
  subdomain-enumeration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Input Files
        run: |
         echo "$TARGET_IGNORE_HOSTS" > ignore-hosts.txt
         echo "$TARGET_IGNORE_IPS" > ignore-ips.txt
      - name: Install Dependencies
        run: |
         go get -u github.com/tomnomnom/assetfinder && cp /home/runner/go/bin/assetfinder .
         sudo snap install amass
         wget --quiet https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && mv jq-linux64 jq && chmod +x jq
         wget --quiet https://github.com/Findomain/Findomain/releases/download/2.1.5/findomain-linux && mv findomain-linux findomain && chmod +x findomain
         wget --quiet https://github.com/projectdiscovery/subfinder/releases/download/v2.4.5/subfinder_2.4.5_linux_amd64.tar.gz && tar -xzvf subfinder_2.4.5_linux_amd64.tar.gz
         pip3 install dnsgen && cp ~/.local/bin/dnsgen .
      - name: Certspotter
        run: |
         curl -s "https://api.certspotter.com/v1/issuances?domain="$TARGET_DOMAIN"&expand=dns_names" | ./jq '.[].dns_names[]' | sed 's/\"//g' | sed 's/\*\.//g' | grep "$TARGET_DOMAIN" | uniq | tee output.txt
      - name: Amass
        run: |
         amass enum -passive -d "$TARGET_DOMAIN" >> output.txt
      - name: Assetfinder
        run: |
         ./assetfinder --subs-only "$TARGET_DOMAIN" -silent >> output.txt                                 
      - name: Crt.sh
        run: |
         curl https://crt.sh/?q=%."$TARGET_DOMAIN" | grep "$TARGET_DOMAIN" | cut -d '>' -f2 | cut -d '<' -f1 | grep -v " " | uniq >> output.txt     
      - name: Findomain
        run: |
         ./findomain -t "$TARGET_DOMAIN" -q >> output.txt       
      - name: Subfinder
        run: |
         ./subfinder -d "$TARGET_DOMAIN" -all --silent >> output.txt  
      - name: Unique subdomains
        run: |
         cat output.txt | sed 's/\*\.//g' | uniq > subdomains-tools-output.txt
      - name: Create Wordlists
        run: |
         sed "s/$/.$TARGET_DOMAIN/" wordlists/subdomain-wordlists.txt > custom-wordlist.txt
         ./dnsgen subdomains-tools-output.txt >> custom-wordlist.txt
         cat subdomains-tools-output.txt >> custom-wordlist.txt
         sort -u custom-wordlist.txt -o custom-wordlist.txt
         grep -vf ignore-hosts.txt custom-wordlist.txt > massdns-input.txt
      - name: Send Subdomain Tools Output Files to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomains-Tools-Results -F filename="$TARGET_DOMAIN"-tools-subdomains.txt -F file=@subdomains-tools-output.txt
      - name: Artifact Files
        run: |
         mkdir bbp-private-artifacts && cp massdns-input.txt bbp-private-artifacts/
      - name: Upload BBP-Private Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded
         path: bbp-private-artifacts/
    
    
  amass-brute:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: sudo snap install amass                  
      - name: Amass
        run: amass enum -active -brute -d "$TARGET_DOMAIN" -dir amass_out
      - name: Artifact Files
        run: mkdir bbp-private-artifacts && cp amass_out/amass.txt  bbp-private-artifacts/
      - name: Upload BBP-Private Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded
         path: bbp-private-artifacts/
         
         
  massdns-resolver:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration,amass-brute]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded 
      - name: Input Files
        run: |
         echo "$TARGET_IGNORE_IPS" > ignore-ips.txt              
      - name: Install Dependencies
        run: |
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
         git clone https://github.com/blechschmidt/massdns.git && cd massdns/ && make
      - name: DNS Resolver-MassDNS
        run: |
         sort -u amass.txt -o amass.txt
         cat amass.txt >> massdns-input.txt
         ./massdns/bin/massdns -r resolvers.txt -t A -o S -w massdns-output.txt massdns-input.txt
         cat massdns-output.txt | awk '{print $1}' | sed 's/.$//' | sort -u > live-hosts-temp-output.txt
         cat massdns-output.txt | awk '{print $3}' | sort -u | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" > live-ips-output-temp.txt         
         grep -vf ignore-ips.txt live-ips-output-temp.txt > live-ips-output.txt
         tr A-Z a-z < live-hosts-temp-output.txt | tee live-hosts-output.txt
         sort -u live-hosts-output.txt -o live-hosts-output.txt
         sort -u live-ips-output.txt -o live-ips-output.txt  
      - name: Send MassDNS Output Files to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-MassDNS-Live-Hosts-Results -F filename="$TARGET_DOMAIN"-live-hosts.txt -F file=@live-hosts-output.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-MassDNS-Live-IPs-Results -F filename="$TARGET_DOMAIN"-live-ips.txt -F file=@live-ips-output.txt  
      - name: Artifact Files
        run: |
         mkdir bbp-private-artifacts && cp live-hosts-output.txt bbp-private-artifacts/
      - name: Upload BBP-Private Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded
         path: bbp-private-artifacts/
         
  httpx-resolver:
    runs-on: ubuntu-latest
    needs: [massdns-resolver]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded         
      - name: Install Dependencies
        run: |
         wget https://github.com/projectdiscovery/httpx/releases/download/v1.0.3/httpx_1.0.3_linux_amd64.tar.gz && tar -xvf httpx_1.0.3_linux_amd64.tar.gz       
      - name: httpx Resolver
        run: |
         ./httpx -l live-hosts-output.txt -o live-httpx-subdomains-raw-output.txt -threads 10000 -silent -stats -cname
         cat live-httpx-subdomains-raw-output.txt | awk '{print $1}' >> live-httpx-subdomains-output.txt
         cat live-httpx-subdomains-output.txt | cut -d "/" -f 3 | tee -a live-httpx-subdomains-hosts-output.txt
      - name: Send httpx Output Files to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-httpx-HTTP-Resolved-Results-Raw -F filename="$TARGET_DOMAIN"-http-resolved-raw.txt -F file=@live-httpx-subdomains-raw-output.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-httpx-HTTP-Resolved-Url-Results -F filename="$TARGET_DOMAIN"-http-resolved.txt -F file=@live-httpx-subdomains-output.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-httpx-HTTP-Resolved-Hosts-Results -F filename="$TARGET_DOMAIN"-http-resolved-hosts.txt -F file=@live-httpx-subdomains-hosts-output.txt
      - name: Artifact Files
        run: |
         mkdir bbp-private-artifacts && cp live-httpx-subdomains-output.txt bbp-private-artifacts/
      - name: Upload BBP-Private Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded
         path: bbp-private-artifacts/

  subdomain-takeover:
    runs-on: ubuntu-latest
    needs: [httpx-resolver]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded 
      - name: Install Dependencies
        run: |
         go get -u -v github.com/lukasikic/subzy && cp /home/runner/go/bin/subzy .
         go get -v github.com/haccer/subjack && cp /home/runner/go/bin/subjack .
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         wget https://github.com/projectdiscovery/nuclei/releases/download/v2.2.0/nuclei_2.2.0_linux_amd64.tar.gz && tar -xzvf nuclei_2.2.0_linux_amd64.tar.gz          
      - name: Subzy
        run: |
         ./subzy --targets=live-httpx-subdomains-output.txt -concurrency 50 | tee subzy-logs.txt
         cat subzy-logs.txt | grep -v "NOT VULNERABLE" > subzy-output.txt   
      - name: Subjack
        run: |
         ./subjack -w live-httpx-subdomains-output.txt -t 100 -timeout 30 -o subjack-logs.txt -v -c /home/runner/go/src/github.com/haccer/subjack/fingerprints.json
         cat subjack-logs.txt | grep -v "Not Vulnerable" | tee subjack-output.txt
      - name: Nuclei
        run: |
         ./nuclei -l live-httpx-subdomains-output.txt -c 100 -stats -t nuclei-templates/subdomain-takeover/ -o nuclie-output.txt
      - name: Combine Outputs
        run: |
         if [[ -f subzy-logs.txt ]]; then echo "*****Subzy*****" > "$TARGET_DOMAIN"-subdomain-takeover-logs.txt; cat subzy-logs.txt >> "$TARGET_DOMAIN"-subdomain-takeover-logs.txt; fi
         if [[ -f subjack-logs.txt ]]; then echo "*****Subjack*****" >> "$TARGET_DOMAIN"-subdomain-takeover-logs.txt; cat subjack-logs.txt >> "$TARGET_DOMAIN"-subdomain-takeover-logs.txt; fi
         if [[ -f subzy-output.txt ]]; then echo "*****Subzy*****" > "$TARGET_DOMAIN"-subdomain-takeover-results.txt; cat subzy-output.txt >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; fi
         if [[ -f subjack-output.txt ]]; then echo "*****Subjack*****" >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; cat subjack-output.txt >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; fi
         if [[ -f nuclie-output.txt ]]; then echo "*****Nuceli*****" >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; cat nuclie-output.txt >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; fi
      - name: Send Output Files Slack Channel
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomain-Takeover-Logs -F filename="$TARGET_DOMAIN"-subdomain-takeover-logs.txt -F file=@"$TARGET_DOMAIN"-subdomain-takeover-logs.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomain-Takeover-Results -F filename="$TARGET_DOMAIN"-subdomain-takeover-results.txt -F file=@"$TARGET_DOMAIN"-subdomain-takeover-results.txt


  nuclei-scan:
    runs-on: ubuntu-latest  
    needs: [httpx-resolver]   
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded  
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         wget --quiet https://github.com/projectdiscovery/nuclei/releases/download/v2.2.0/nuclei_2.2.0_linux_amd64.tar.gz
         tar -xzvf nuclei_2.2.0_linux_amd64.tar.gz
      - name: Nuclei scan
        run: |        
         ./nuclei -l live-httpx-subdomains-output.txt -c 500 -stats -silent -t nuclei-templates/ -exclude nuclei-templates/fuzzing/wp-plugin-scan.yaml -exclude nuclei-templates/fuzzing/basic-auth-bruteforce.yaml -exclude nuclei-templates/default-credentials/ -o nuclie-output.txt
         if [[ -f nuclie-output.txt ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Nuclei-Scan-Results -F filename="$TARGET_DOMAIN"-nuclei-scan.txt -F file=@nuclie-output.txt; fi
         
         
  js-hunter:
    runs-on: ubuntu-latest
    needs: [httpx-resolver]            
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded 
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/nsonaniya2010/SubDomainizer.git && pip3 install -r SubDomainizer/requirements.txt            
      - name: Subdomanizer
        run: |
         python3 SubDomainizer/SubDomainizer.py -l live-httpx-subdomains-output.txt -cop cloud.txt -o subdomains.txt -sop secrets.txt
      - name: Send Output Files Slack Channel
        run: |
         subdomains_count=$(cat subdomains.txt | wc -w)
         secrets_count=$(cat secrets.txt | wc -w)
         cloud_count=$(cat cloud.txt | wc -w)
         if [[ -f subdomains.txt ]] && [[ "$subdomains_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomainizer-Results -F filename="$TARGET_DOMAIN"-subdomainizer-subdomains.txt -F file=@subdomains.txt ; fi
         if [[ -f cloud.txt ]] && [[ "$cloud_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomainizer-Results -F filename="$TARGET_DOMAIN"-subdomainizer-cloud.txt -F file=@cloud.txt ; fi
         if [[ -f secrets.txt ]] && [[ "$secrets_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomainizer-Results -F filename="$TARGET_DOMAIN"-subdomainizer-secrets.txt -F file=@secrets.txt ; fi
