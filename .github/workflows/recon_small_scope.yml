#Important Note:
# Before running this action, make sure you updated following secrets variables in settings.
#  1. SMALL_DOMAINS
#       example.com
#       info.example.com

#Jobs Modules:
#http-probe
#nuclei-scan
#nmap-vulnerability-scan
#nmap-udp-scan
#url-collector
#parameter-discovery
#xss-hunter
#javascript-scan
#secrets-finder
#directory-fuzzing
#sensitive-files-fuzzing
#CORS-scanner
#sql-injection
#gochopchop
#Subdomainizer
#nikto-scan
name: Recon Small Scope
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.SMALL_DOMAINS }}
      XSS_HUNTER_URL_TOKEN: ${{ secrets.XSS_HUNTER }}
      SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      SLACK_CHANNEL_NAME: ${{ secrets.SLACK_SMALL_NAME }}
jobs:
  http-probe:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2             
      - name: Install Dependencies
        run: |
         echo "$TARGET" > subdomains.txt
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
         chmod +x binaries/httpx; 
      - name: HTTP Probe
        run: |
         ./binaries/httpx -l subdomains.txt -follow-redirects -status-code -vhost -threads 300 -silent | grep "[200]" | cut -d " " -f 1 | sort -u > subdomains-resolved-url.txt 
         cat subdomains-resolved-url.txt | cut -d "/" -f 3  > subdomains-resolved-host.txt
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: http-probe-artifacts
         path: |
          subdomains-resolved-url.txt 
          subdomains-resolved-host.txt
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=Scopes -F filename=subdomains-resolved.txt -F file=@subdomains-resolved-url.txt
         
#Nuclei Template Scan.
  nuclei-scan:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         chmod +x binaries/nuclei   
      - name: Nuclei scan
        run: |
         ./binaries/nuclei -l subdomains-resolved-url.txt -c 500 -stats -silent -t nuclei-templates/ -o nuclie-scan.txt
       #./binaries/nuclei -l subdomains-resolved-url.txt -c 500 -stats -silent -t nuclei-templates/ -exclude nuclei-templates/fuzzing/wp-plugin-scan.yaml -exclude nuclei-templates/fuzzing/basic-auth-bruteforce.yaml -exclude nuclei-templates/default-credentials/ -o nuclie-scan.txt        
      - name: Send Output to Slack
        run: if [[ -f nuclie-scan.txt ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Nuclei-Template-Scan -F filename=nuclie-scan.txt -F file=@nuclie-scan.txt; fi

#NMAP Vulnerability Full Scan
  nmap-vulnerability-scan:
    runs-on: ubuntu-latest    
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: |
         sudo apt-get update && sudo apt-get install nmap -y
         cd /usr/share/nmap/scripts/
         sudo git clone https://github.com/vulnersCom/nmap-vulners.git
         sudo git clone https://github.com/scipag/vulscan
         cd vulscan/utilities/updater/ ; sudo chmod +x updateFiles.sh ; sudo ./updateFiles.sh
      - name: Nmap scan
        run: nmap -Pn -sV -p- --script nmap-vulners,vulscan,vuln --script-args vulscandb=scipvuldb.csv -iL subdomains-resolved-host.txt -oN nmap-vulnerability-scan.txt 
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="TARGET"-Nmap-Vulnerability-Scan -F filename=nmap-vulnerability-scan.txt  -F file=@nmap-vulnerability-scan.txt

#NMAP UDP Full Scan
  nmap-udp-scan:
    runs-on: ubuntu-latest    
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install nmap -y
      - name: Nmap UDP scan
        run: sudo nmap -Pn -sV -p- -sU -iL subdomains-resolved-host.txt -oA nmap-udp-scan
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="TARGET"-Nmap-UDP-Scan -F filename=nmap-udp-scan.nmap -F file=@nmap-udp-scan.nmap

#Collect URLs.
  url-collector:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: cd binaries; chmod +x waybackurls gau; cd ..
      - name: waybackurls & gau
        run: |
         for domain in $(cat subdomains-resolved-host.txt) ; do ./binaries/waybackurls "$domain" >> waybackurls.txt ;
         for domain in $(cat subdomains-resolved-host.txt) ; do ./binaries/gau "$domain" >> gau.txt ;
         cat gau.txt | sort -u >> waybackurls.txt
      - name: Patterns
        run: |
         mkdir url-collector-artifacts
         cp waybackurls.txt url-collector-artifacts/
         cat waybackurls.txt | sort -u | grep -iE 'access=|admin=|dbg=|debug=|edit=|grant=|test=|alter=|clone=|create=|delete=|disable=|enable=|exec=|execute=|load=|make=|modify=|rename=|reset=|shell=|toggle=|adm=|root=|cfg=|dest=|redirect=|uri=|path=|continue=|url=|window=|next=|data=|reference=|site=|html=|val=|validate=|domain=|callback=|return=|page=|feed=|host=|port=|to=|out=|view=|dir=|show=|navigation=|open=|file=|document=|folder=|pg=|php_path=|style=|doc=|img=|filename=' > url-collector-artifacts/ssrf-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'id=|select=|report=|role=|update=|query=|user=|name=|sort=|where=|search=|params=|process=|row=|view=|table=|from=|sel=|results=|sleep=|fetch=|order=|keyword=|column=|field=|delete=|string=|number=|filter=' > url-collector-artifacts/sqli-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'template=|preview=|id=|view=|activity=|name=|content=|redirect=' > url-collector-artifacts/ssti-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'q=|s=|search=|lang=|keyword=|query=|page=|keywords=|year=|view=|email=|type=|name=|p=|callback=|jsonp=|api_key=|api=|password=|email=|emailto=|token=|username=|csrf_token=|unsubscribe_token=|id=|item=|page_id=|month=|immagine=|list_type=|url=|terms=|categoryid=|key=|l=|begindate=|enddate=' > url-collector-artifacts/xss-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'file=|document=|folder=|root=|path=|pg=|style=|pdf=|template=|php_path=|doc=|page=|name=|cat=|dir=|action=|board=|date=|detail=|download=|prefix=|include=|inc=|locate=|show=|site=|type=|view=|content=|layout=|mod=|conf=|url=' > url-collector-artifacts/lfi-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'daemon=|upload=|dir=|download=|log=|ip=|cli=|cmd=|exec=|command=|execute=|ping=|query=|jump=|code=|reg=|do=|func=|arg=|option=|load=|process=|step=|read=|function|req=|feature=|exe=|module=|payload=|run=|print=' > url-collector-artifacts/rce-params.txt
         cat waybackurls.txt | sort -u | grep -iE 'Lmage_url=|Open=|callback=|cgi-bin/redirect.cgi|cgi-bin/redirect.cgi?|checkout=|checkout_url=|continue=|data=|dest=|destination=|dir=|domain=|feed=|file=|file_name=|file_url=|folder=|folder_url=|forward=|from_url=|go=|goto=|host=|html=|image_url=|img_url=|load_file=|load_url=|login?to=|login_url=|logout=|navigation=|next=|next_page=|out=|page=|page_url=|path=|port=|redir=|redirect=|redirect_to=|redirect_uri=|redirect_url=|reference=|return=|returnTo=|return_path=|return_to=|return_url=|rt=|rurl=|show=|site=|target=|to=|uri=|url=|val=|validate=|view=|window=' > url-collector-artifacts/redirect-params.txt
         cat waybackurls.txt | sort -u | grep -iE '=.*.jpg|=.*.jpeg|=.*.gif|=.*.png' > url-collector-artifacts/img-traversal.txt
         zip -r url-collector-artifacts.zip url-collector-artifacts/
         xz url-collector-artifacts.zip
      - name: Upload URL Collector Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: url-collector-artifacts
         path: url-collector-artifacts/
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="TARGET"-URL-Pattern-Collector -F filename=url-collector-artifacts.zip.xz -F file=@url-collector-artifacts.zip.xz

#Parameter Discovery
  parameter-discovery:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/devanshbatham/ParamSpider
         cd ParamSpider; pip3 install -r requirements.txt; cd ..
      - name: ParamSpider
        run: for url in $(cat subdomains-resolved-url.txt); do python3 ParamSpider/paramspider.py -d "$url" -l high --exclude woff,css,js,png,svg,php,jpg >> paramspider.txt; done ;
      - name: Upload BBP-Public Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: paramspider-artifacts
         path: paramspider.txt 
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Parameter-Discovery -F filename=paramspider.txt -F file=@paramspider.txt
         
#XSS Automation
  xss-hunter:
    runs-on: ubuntu-latest
    needs: parameter-discovery
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: paramspider-artifacts        
      - name: Install Dependencies
        run: sudo snap install dalfox       
      - name: Dalfox
        run: dalfox -b "$XSS_HUNTER_URL_TOKEN" file paramspider.txt > xss-vulnerable-urls.txt
      - name: Send Outputs to Slack
        run: |
         if [[ -f xss-vulnerable-urls.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-XSS -F filename=xss-vulnerable-urls.txt -F file=@xss-vulnerable-urls.txt; fi
       
#Javascript Scan
  javascript-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2      
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         cd binaries; chmod +x gau subjs hakrawler httpx; cd ..
         git clone https://github.com/GerbenJavado/LinkFinder.git
         cd LinkFinder; sudo python3 setup.py install; sudo pip3 install -r requirements.txt; cd ..
         wget https://raw.githubusercontent.com/m4ll0k/Bug-Bounty-Toolz/master/getjswords.py
         wget https://gist.githubusercontent.com/KathanP19/d2cda2f99c0b60d64b76ee6039b37e47/raw/eb105a4de06502b2732df9d682c61189c3703685/jsvar.sh
      - name: Javascript Scan
        run: |
         for url in $(cat subdomains-resolved-url.txt); do echo "$url" | ./binaries/gau | grep -iE "\.js$" | sort -u >> js-file-links.txt; done;
         for url in $(cat subdomains-resolved-url.txt); do echo "$url" | ./binaries/subjs >> js-file-links.txt; done;
         for url in $(cat subdomains-resolved-url.txt); do echo "$url" | ./binaries/hakrawler -js -depth 2 -scope subs -plain >> js-file-links.txt; done;
         cat js-file-links.txt | ./binaries/httpx -follow-redirects -silent -status-code | grep "[200]" | cut -d ' ' -f1 | sort -u > js-file-links-live.txt;
         for url in $(cat subdomains-resolved-url.txt); do python3 LinkFinder/linkfinder.py -d -i "$url" -o cli >> js-endpoints.txt; done;
         cat js-file-links-live.txt | python3 getjswords.py | sort -u > js-words.txt;
         cat js-file-links-live.txt | while read url ; do bash jsvar.sh $url | sort -u | tee js-xss.txt ; done;
      - name: Send Outputs to Slack
        run: |
         if [[ -f js-file-links-live.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Files-URL -F filename=js-file-links-live.txt -F file=@js-file-links-live.txt; fi;
         if [[ -f js-endpoints.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Endpoints -F filename=js-endpoints.txt -F file=@js-endpoints.txt; fi;
         if [[ -f js-words.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Files-Words -F filename=js-words.txt -F file=@js-words.txt; fi ;
         if [[ -f js-xss.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-XSS -F filename=js-xss.txt -F file=@js-xss.txt; fi;

#Secrets Finder
  secrets-finder:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts       
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/m4ll0k/SecretFinder.git
         cd SecretFinder; pip3 install -r requirements.txt
      - name: Secrets Finder
        run: |
         cat subdomains-resolved-url.txt | xargs -I %% bash -c 'python3 SecretFinder/SecretFinder.py -i %% -e -o cli' > secret-finder.txt; 
         cat secret-finder.txt | grep 'google_api' -B 1 | sort -u > gmapapi.txt;
      - name: Send Outputs to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Secret-Finder -F filename=secret-finder.txt -F file=@secret-finder.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Gmap-api -F filename=gmapapi.txt -F file=@gmapapi.txt

#Directory Fuzzing
  directory-fuzzing:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts       
      - name: Install Dependencies
        run: |
         git clone https://github.com/maurosoria/dirsearch.git
         wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/directory-list-2.3-medium.txt
      - name: Directory Fuzzing
        run: |
         python3 dirsearch/dirsearch.py -l subdomains-resolved-url.txt -t 300 -i 200,201,202,203,204,301,302,303,304 -b -w directory-list-2.3-medium.txt;
         zip -r dirsearch-reports.zip dirsearch/reports && xz dirsearch-reports.zip
      - name: Send Outputs to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="TARGET"-Directory-Fuzzing -F filename=dirsearch-reports.zip.xz -F file=@dirsearch-reports.zip.xz

#Fuzz Sensitive Files
  sensitive-files-fuzzing:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts    
      - name: Install Dependencies
        run: |
         wget $HOST/subdomains-resolved.out
         git clone https://github.com/maurosoria/dirsearch.git
      - name: Directory Fuzzing
        run: |
         python3 dirsearch/dirsearch.py -l subdomains-resolved-url.txt -t 300 -i 200,201,202,203,204,301,302,303,304 -b -w wordlists/sensitive-wordlist.txt;
         zip -r dirsearch-reports.zip dirsearch/reports && xz dirsearch-reports.zip
      - name: Send Outputs to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Directory-Fuzzing -F filename=dirsearch-reports.zip.xz -F file=@dirsearch-reports.zip.xz

#CORS Scanner
  CORS-scanner:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts       
      - name: Install Dependencies
        run: |
         pip3 install wheel
         sudo apt-get install python3-setuptools
         git clone https://github.com/chenjj/CORScanner.git
         sudo pip3 install -r CORScanner/requirements.txt
      - name: CORS Scanner
        run: python3 CORScanner/cors_scan.py -i subdomains-resolved-url.txt -t 200 > cors.txt;
      - name: Send Outputs to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="TARGET"-CORS-Scanner -F filename=cors.txt -F file=@cors.txt

  sql-injection:
    runs-on: ubuntu-latest   
    needs: url-collector        
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: url-collector-artifacts
      - name: Install Dependencies
        run: git clone https://github.com/sqlmapproject/sqlmap.git
      - name: sqlmap
        run: | 
         mkdir sqlmap-output
         python3 sqlmap/sqlmap.py -m sqli-params.txt --batch --banner --dbs --output-dir sqlmap-output
         zip -r sqlmap-output.zip sqlmap-output                         
      - name: Send Files to Slack Channel            
        run: if [[ ! -z $(ls -A sqlmap-output) ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-sqlmap -F filename=sqlmap-output.zip -F file=@sqlmap-output.zip; fi 
    
  gochopchop:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts 
      - name: Install Dependencies
        run: |
         sudo chmod +x binaries/gochopchop
         wget https://raw.githubusercontent.com/michelin/ChopChop/master/chopchop.yml
      - name: GoChopChop
        run: |
         ./binaries/gochopchop scan --url-file subdomains-resolved-url.txt --export json --export-filename gochopchop-out
         zip gochopchop-out.json.zip gochopchop-out.json
      - name: Send Output to Slack
        run: if [[ -f gochopchop-out.json.zip ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-GoChopChop -F filename=gochopchop-out.json.zip -F file=@gochopchop-out.json.zip; fi;
    
  Subdomainizer:
    runs-on: ubuntu-latest              
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts 
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/nsonaniya2010/SubDomainizer.git && pip3 install -r SubDomainizer/requirements.txt            
      - name: Subdomanizer
        run: |
         python3 SubDomainizer/SubDomainizer.py -l subdomains-resolved-url.txt -cop cloud.txt -o subdomains.txt -sop secrets.txt;
         zip subdomanizer.zip cloud.txt secrets.txt
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Subdomainizer -F filename=subdomanizer.zip -F file=@subdomanizer.zip

  nikto-scan:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts 
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install nikto -y
      - name: Nikto Scan
        run: |
         for host in $(cat subdomains-resolved-host.txt) ; do nikto -host $host >> nikto-80-output.txt; done;
         for host in $(cat subdomains-resolved-host.txt) ; do nikto -host $host:443 >> nikto-443-output.txt; done;
         zip nikto-scan.zip nikto-80-output.txt nikto-443-output.txt
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Nikto-Scan -F filename=nikto-scan.zip -F file=@nikto-scan.zip
