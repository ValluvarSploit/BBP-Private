#Important Note:
# Before running this action, make sure you updated following secrets variables in settings.
#  1. SUBDOMAINS
#       example.com
#       info.example.com
name: Recon Small Scope
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.SUBDOMAINS }}
      XSS_HUNTER_URL_TOKEN: ${{ secrets.XSS_HUNTER_BLIND_URL_TOKEN }}
      SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      SLACK_CHANNEL_NAME: ${{ secrets.PUBLIC_SLACK_CHANNEL_NAME }}
jobs:
  http-probe:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2             
      - name: Install Dependencies
        run: |
         echo "$TARGET" > subdomains.txt
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
         chmod +x binaries/httpx; 
      - name: HTTP Probe
        run: ./binaries/httpx -l subdomains.txt -follow-redirects -status-code -vhost -threads 300 -silent | grep "[200]" | cut -d " " -f 1 | sort -u > subdomains-resolved.txt 
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: http-probe-artifacts
         path: subdomains-resolved.txt 
           
#Nuclei Template Scan.
  nuclei-scan:
    runs-on: ubuntu-latest
    needs: [http-probe]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         chmod +x binaries/nuclei   
      - name: Nuclei scan
        run: |
         ./binaries/nuclei -l subdomains-resolved.txt -c 500 -stats -silent -t nuclei-templates/ -o nuclie-scan.txt
       #./binaries/nuclei -l subdomains-resolved.txt -c 500 -stats -silent -t nuclei-templates/ -exclude nuclei-templates/fuzzing/wp-plugin-scan.yaml -exclude nuclei-templates/fuzzing/basic-auth-bruteforce.yaml -exclude nuclei-templates/default-credentials/ -o nuclie-scan.txt        
      - name: Send Output to Slack
        run: if [[ -f nuclie-scan.txt ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=Nuclei-Template-Scan -F filename=nuclie-scan.txt -F file=@nuclie-scan.txt; fi

#Nmap Quick Scan
  nmap-quick-scan:
    runs-on: ubuntu-latest    
    needs: [http-probe]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run:  sudo apt-get update && sudo apt-get install nmap -y
      - name: Nmap Quick Scan
        run: nmap -Pn -sV -sC -iL subdomains-resolved.txt -oA nmap-quick-scan
      - name: Send Output to Slack
        run: |
          curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=Nmap-Quick-Scan-XML -F filename=nmap-quick-scan.xml -F file=@nmap-quick-scan.xml
          curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=Nmap-Quick-Scan-NMAP -F filename=nmap-quick-scan.nmap -F file=@nmap-quick-scan.nmap
   
#Nmap Full Scan
  nmap-full-scan:
    runs-on: ubuntu-latest    
    needs: [http-probe]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install nmap -y
      - name: Nmap Full Scan
        run: nmap -Pn -sV -sC -p0-65535 -iL subdomains-resolved.txt -oA nmap-full-scan
      - name: Send Output to Slack
        run: |
          curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=Nmap-Full-Scan-XML -F filename=nmap-full-scan.xml -F file=@nmap-full-scan.xml
          curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=Nmap-Full-Scan-NMAP -F filename=nmap-full-scan.nmap -F file=@nmap-full-scan.nmap

#Broken Link Hijacking on specified targets.
  broken-link-hijacking:
    runs-on: ubuntu-latest
    needs: [http-probe]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: sudo npm install broken-link-checker -g
      - name: blh
        run: while read url ; do printf ***"$url"*** | tee -a blh-output.txt; blc -rof --filter-level 3 $url | tee -a blh-output.txt; done < subdomains-resolved.txt
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Broken-Link-Checker -F filename=blh.txt -F file=@blh-output.txt

#Collect URLs.
  url-collector:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: |
         cd binaries; chmod +x waybackurls gau; cd ..
         go get -u github.com/tomnomnom/gf && cp /home/runner/go/bin/gf .
         git clone https://github.com/1ndianl33t/Gf-Patterns && mkdir ~/.gf && cp -r Gf-Patterns/*.json ~/.gf/
         cd ~/.gf/; wget https://raw.githubusercontent.com/devanshbatham/ParamSpider/master/gf_profiles/potential.json
      - name: waybackurls
        run: for url in $(cat subdomains-resolved.txt); do ./binaries/waybackurls "$url" >> waybackurls.txt ; done ; 
      - name: gau
        run: |
         for url in $(cat subdomains-resolved.txt); do ./binaries/gau "$url" >> gau.txt ; done ; 
         cat gau.txt | sort -u >> waybackurls.txt 
      - name: Patterns
        run: |
         mkdir url-collector-artifacts
         ./gf xss waybackurls.txt | cut -d : -f3- | sort -u > url-collector-artifacts/xss-params.txt
         ./gf ssti waybackurls.txt | sort -u > url-collector-artifacts/ssti-params.txt  
         ./gf ssrf waybackurls.txt | sort -u > url-collector-artifacts/ssrf-params.txt 
         ./gf sqli waybackurls.txt | sort -u > url-collector-artifacts/sqli-params.txt
         ./gf redirect waybackurls.txt | cut -d : -f3- | sort -u > url-collector-artifacts/redirect-params.txt
         ./gf rce waybackurls.txt | sort -u > url-collector-artifacts/rce-params.txt
         ./gf lfi waybackurls.txt | sort -u > url-collector-artifacts/lfi-params.txt
         ./gf potential waybackurls.txt | cut -d : -f3- | sort -u > url-collector-artifacts/potential-params.txt
         zip -r url-collector-artifacts.zip url-collector-artifacts/
         xz url-collector-artifacts.zip
      - name: Upload URL Collector Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: url-collector-artifacts
         path: url-collector-artifacts/
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=URL-Pattern-Collector -F filename=url-collector-artifacts.zip.xz -F file=@url-collector-artifacts.zip.xz

#Parameter Discovery
  parameter-discovery:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/devanshbatham/ParamSpider
         cd ParamSpider; pip3 install -r requirements.txt; cd ..
      - name: ParamSpider
        run: |
         for url in $(cat subdomains-resolved.txt); do python3 ParamSpider/paramspider.py -d "$url" -l high --exclude woff,css,js,png,svg,php,jpg >> paramspider.txt; done ;
      - name: Upload BBP-Public Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: paramspider-artifacts
         path: paramspider.txt 
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Parameter-Discovery -F filename=paramspider.txt -F file=@paramspider.txt
         
#XSS Automation
  xss-hunter:
    runs-on: ubuntu-latest
    needs: [parameter-discovery]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: paramspider-artifacts        
      - name: Install Dependencies
        run: sudo snap install dalfox       
      - name: Dalfox
        run: dalfox -b "$XSS_HUNTER_URL_TOKEN" file paramspider.txt > xss-vulnerable-urls.txt
      - name: Send Outputs to Slack
        run: |
         if [[ -f xss-vulnerable-urls.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=XSS -F filename=xss-vulnerable-urls.txt -F file=@xss-vulnerable-urls.txt; fi
       #count=$(cat xss-vulnerable-urls.txt | wc -w)
       #if [[ -f xss-vulnerable-urls.txt ]] && [[ "$count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-XSS-Results -F filename="$TARGET"-xss-poc-urls.txt -F file=@xss-vulnerable-urls.txt; fi


#Javascript Scan
  javascript-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2      
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         cd binaries; chmod +x gau subjs hakrawler httpx; cd ..
         git clone https://github.com/GerbenJavado/LinkFinder.git
         cd LinkFinder; sudo python3 setup.py install; sudo pip3 install -r requirements.txt; cd ..
         wget https://raw.githubusercontent.com/m4ll0k/Bug-Bounty-Toolz/master/getjswords.py
         wget https://gist.githubusercontent.com/KathanP19/d2cda2f99c0b60d64b76ee6039b37e47/raw/eb105a4de06502b2732df9d682c61189c3703685/jsvar.sh
      - name: Javascript Scan
        run: |
         for url in $(cat subdomains-resolved.txt); do echo "$url" | ./binaries/gau | grep -iE "\.js$" | sort -u >> js-file-links.txt; done;
         for url in $(cat subdomains-resolved.txt); do echo "$url" | ./binaries/subjs >> js-file-links.txt; done;
         for url in $(cat subdomains-resolved.txt); do echo "$url" | ./binaries/hakrawler -js -depth 2 -scope subs -plain >> js-file-links.txt; done;
         cat js-file-links.txt | ./binaries/httpx -follow-redirects -silent -status-code | grep "[200]" | cut -d ' ' -f1 | sort -u > js-file-links-live.txt;
         for url in $(cat subdomains-resolved.txt); do python3 LinkFinder/linkfinder.py -d -i "$url" -o cli >> js-endpoints.txt; done;
         cat js-file-links-live.txt | python3 getjswords.py | sort -u > js-words.txt;
         cat js-file-links-live.txt | while read url ; do bash jsvar.sh $url | sort -u | tee js-xss.txt ; done;
      - name: Send Outputs to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Files-URL -F filename=js-file-links-live.txt -F file=@js-file-links-live.txt;
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Endpoints -F filename=js-endpoints.txt -F file=@js-endpoints.txt;
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Files-Words -F filename=js-words.txt -F file=@js-words.txt;
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-XSS -F filename=js-xss.txt -F file=@js-xss.txt;

#Secrets Finder
  secrets-finder:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts       
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/m4ll0k/SecretFinder.git
         cd SecretFinder; pip3 install -r requirements.txt
      - name: Secrets Finder
        run: |
         cat subdomains-resolved.txt | xargs -I %% bash -c 'python3 SecretFinder/SecretFinder.py -i %% -e -o cli' > secret-finder.txt; 
         cat secret-finder.txt | grep 'google_api' -B 1 | sort -u > gmapapi.txt;
      - name: Send Outputs to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=-Secret-Finder -F filename=secret-finder.txt -F file=@secret-finder.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=Gmap-api -F filename=gmapapi.txt -F file=@gmapapi.txt

#Directory Fuzzing
  directory-fuzzing:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts       
      - name: Install Dependencies
        run: |
         git clone https://github.com/maurosoria/dirsearch.git
         wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/directory-list-2.3-big.txt
      - name: Directory Fuzzing
        run: |
         python3 dirsearch/dirsearch.py -l subdomains-resolved.txt -t 300 -i 200,201,202,203,204,301,302,303,304 -b -w directory-list-2.3-big.txt;
         zip -r dirsearch-reports.zip dirsearch/reports && xz dirsearch-reports.zip
      - name: Send Outputs to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=Directory-Fuzzing -F filename=dirsearch-reports.zip.xz -F file=@dirsearch-reports.zip.xz

#CORS Scanner
  CORS-scanner:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts       
      - name: Install Dependencies
        run: |
         pip3 install wheel
         sudo apt-get install python3-setuptools
         git clone https://github.com/chenjj/CORScanner.git
         sudo pip3 install -r CORScanner/requirements.txt
      - name: CORS Scanner
        run: python3 CORScanner/cors_scan.py -i subdomains-resolved.txt -t 200 > cors.txt;
      - name: Send Outputs to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=CORS-Scanner -F filename=cors.txt -F file=@cors.txt

#HeartBleed Scanner
  heartbleed-scanner:
    runs-on: ubuntu-latest
    needs: http-probe
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts       
      - name: HeartBleed Scan
        run: cat subdomains-resolved.txt | while read line ; do echo "QUIT"|openssl s_client -connect $line:443 2>&1|grep 'server extension "heartbeat" (id=15)' || echo $line- safe; done
#      - name: Send Outputs to Slack
#        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-CORS-Scanner -F filename=cors.txt -F file=@cors.txt

  sql-injection:
    runs-on: ubuntu-latest   
    needs: [url-collector]           
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: url-collector-artifacts
      - name: Install Dependencies
        run: git clone https://github.com/sqlmapproject/sqlmap.git
      - name: sqlmap
        run: | 
         mkdir sqlmap-output
         python3 sqlmap/sqlmap.py -m sqli-params.txt --batch --banner --dbs --output-dir sqlmap-output
         zip -r sqlmap-output.zip sqlmap-output                         
      - name: Send Files to Slack Channel            
        run: if [[ ! -z $(ls -A sqlmap-output) ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-sqlmap -F filename=sqlmap-output.zip -F file=@sqlmap-output.zip; fi 
    
  gochopchop:
    runs-on: ubuntu-latest
    needs: [http-probe]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts 
      - name: Install Dependencies
        run: |
         sudo chmod +x binaries/gochopchop
         wget https://raw.githubusercontent.com/michelin/ChopChop/master/chopchop.yml
      - name: GoChopChop
        run: ./binaries/gochopchop scan --url-file subdomains-resolved.txt --export json --export-filename gochopchop-out
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=GoChopChop -F filename=gochopchop-out.json -F file=@gochopchop-out.json    
    
  Subdomainizer:
    runs-on: ubuntu-latest              
    needs: [http-probe]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: http-probe-artifacts 
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/nsonaniya2010/SubDomainizer.git && pip3 install -r SubDomainizer/requirements.txt            
      - name: Subdomanizer
        run: python3 SubDomainizer/SubDomainizer.py -l subdomains-resolved.txt -cop cloud.txt -o subdomains.txt -sop secrets.txt;
      - name: Send Output to Slack
        run: |
         subdomains_count=$(cat subdomains.txt | wc -w)
         secrets_count=$(cat secrets.txt | wc -w)
         cloud_count=$(cat cloud.txt | wc -w)
         if [[ -f subdomains.txt ]] && [[ "$subdomains_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=Subdomainizer-Subdomains -F filename=subdomainizer-subdomains.txt -F file=@subdomains.txt ; fi
         if [[ -f cloud.txt ]] && [[ "$cloud_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=Subdomainizer-Cloud -F filename=subdomainizer-cloud.txt -F file=@cloud.txt ; fi
         if [[ -f secrets.txt ]] && [[ "$secrets_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title=Subdomainizer-Secrets -F filename=subdomainizer-secrets.txt -F file=@secrets.txt ; fi
