#  1. DOMAIN_LARGE_PRIVATE
#       example.com
#  2. NGROK_URL
#       ngrok.io
name: Recon Large Scope-Private
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.DOMAIN_LARGE_PRIVATE }}
      EXCLUDE_HOST: ${{ secrets.PRI_EXCLUDE_HOST }}
      HOST: ${{ secrets.NGROK_URL }}
      XSS_HUNTER: ${{ secrets.XSS_HUNTER }}
      AWS_CREDS: ${{ secrets.AWS_CREDENTIALS }}
      GIT_USERS: ${{ secrets.TARGET_GITHUB_USERS_LIST }}
      GIT_ORG: ${{ secrets.TARGET_GITHUB_ORG }}
      GIT_TOKEN: ${{ secrets.TOKEN }}
      S_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      S_CHANNEL: ${{ secrets.SLACK_CN_PRIVATE }}
      S_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PRIVATE }}
      S_URL: https://slack.com/api/files.upload
jobs:
  Subdomain-Enumeration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2         
      - name: Install Dependencies
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"RECON STARTED FOR LARGE SCOPE (PRIVATE) - '$TARGET'"}' "$S_WEBHOOK"
         wget $HOST/subdomains-manual.txt
         wget $HOST/ips-manual.txt         
         sudo apt-get install python3-setuptools
         sudo snap install amass
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
         cd binaries; chmod +x assetfinder findomain subfinder; cd ..
         git clone https://github.com/m8r0wn/subscraper
         cd subscraper; sudo python3 setup.py install; cd ..
      - name: SubScraper
        run: python3 subscraper/subscraper.py "$TARGET" -o subdomains-auto.txt;
      - name: Amass
        run: |
         amass enum -passive -d "$TARGET" -rf resolvers.txt > amass-passive.txt
         cat amass-passive.txt >> subdomains-auto.txt;
      - name: Assetfinder
        run: ./binaries/assetfinder --subs-only "$TARGET" -silent >> subdomains-auto.txt;          
      - name: Findomain
        run: |
         ./binaries/findomain -t "$TARGET" -q >> subdomains-auto.txt; 
         cat subdomains-auto.txt >> subdomains-manual.txt
         sort -u subdomains-manual.txt -o subdomains-manual.txt
         cat subdomains-manual.txt | wc -l
         cat ips-local.txt | wc -l
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
         path: |
          subdomains-manual.txt
          ips-manual.txt
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  DNSgen:
    runs-on: ubuntu-latest
    needs: Subdomain-Enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: subdomain-enumeration-artifacts
      - name: Install Dependencies
        run: pip3 install dnsgen && cp ~/.local/bin/dnsgen .
      - name: DNSgen
        run: |
         ./dnsgen subdomains-manual.txt > dnsgen-wordlist.txt  
         cat dnsgen-wordlist.txt | wc -l
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
         name: dnsgen-artifacts
         path: |
          dnsgen-wordlist.txt 
          subdomains-manual.txt
          ips-manual.txt
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"
       
  MassDNS-Resolver:
    runs-on: ubuntu-latest
    needs: [DNSgen,Subdomain-Enumeration]
    steps:
      - uses: actions/checkout@v2 
      - uses: actions/download-artifact@v2
        with:
         name: dnsgen-artifacts
      - name: Install Dependencies
        run: |
         echo "$EXCLUDE_HOST" > subdomains-exclude.txt
         cd wordlists
         xz -d subdomains-w{1..2}.txt.xz subdomains-1m-{1..13}.txt.xz 
         cat subdomains-w{1..2}.txt bitquark-subdomains-top100000.txt subdomains-1m-{1..13}.txt > ../subdomain-wordlists.txt ;
         cd ..
         sort -u subdomain-wordlists.txt -o subdomain-wordlists.txt
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
      - name: MassDNS
        run: |
         sed "s/$/.$TARGET/" subdomain-wordlists.txt > wordlist-hugh.txt
         cat dnsgen-wordlist.txt >> wordlist-hugh.txt
         sort -u wordlist-hugh.txt -o wordlist-hugh.txt
         grep -vFf subdomains-exclude.txt wordlist-hugh.txt > wordlist-all.txt
         ./binaries/massdns -r resolvers.txt -t A -o S -w massdns-output.txt wordlist-all.txt
         cat massdns-output.txt | awk '{print $1}' | sed 's/.$//' | tr A-Z a-z | sort -u > live-hosts.txt
         cat massdns-output.txt | awk '{print $3}' | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort -u  > live-ips.txt
         cat ips-manual.txt >> live-ips.txt
         sort -u live-ips.txt -o live-ips.txt
         zip massdns-output.zip massdns-output.txt live-ips.txt ; xz massdns-output.zip
      - name: Send Output to Slack
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-MassDNS -F file=@massdns-output.zip
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: massdns-artifacts
         path: |
          live-hosts.txt
          live-ips.txt
          subdomains-manual.txt
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"          
          
  HTTProber:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, MassDNS-Resolver]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: massdns-artifacts
      - name: Install Dependencies
        run: |
         echo "$EXCLUDE_HOST" > subdomains-exclude.txt
         cat live-hosts.txt >> subdomains-manual.txt;
         cat subdomains-manual.txt | sed 's/\*\.//g' | sort -u > subdomains-uniq.txt
         grep -vFf subdomains-exclude.txt subdomains-uniq.txt > subdomains-uniq2.txt
         cat subdomains-uniq2.txt | tr A-Z a-z | sort -u > subdomains.txt
         chmod +x binaries/httpx
      - name: HTTProber
        run: |
         ./binaries/httpx -l subdomains.txt -follow-redirects -status-code -title -cname -vhost -threads 300 -silent -o httpx.log
         cat httpx.log | grep "[200]" | cut -d " " -f 1 | sort -u > subdomains-resolved.txt 
         zip httpx.zip httpx.log subdomains-resolved.txt ; xz httpx.zip
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: httprober-artifacts
         path: |
          subdomains-resolved.txt 
          live-ips.txt
      - name: Send Output to Slack
        run: |
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-httpx -F file=@httpx.zip
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#Subdomain Takeover
  Subdomain-Takeover:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         touch subjack-logs.txt;
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         cd binaries; chmod +x subjack subzy nuclei; cd ..
         cat subdomains-resolved.txt | cut -d "/" -f 3 > subdomains.txt
         cp subdomains.txt binaries/
      - name: Subzy
        run: |
         ./binaries/subzy --targets=subdomains-resolved.txt -concurrency 50 | tee subzy-logs.txt
         cat subzy-logs.txt | grep -v "NOT VULNERABLE" > subzy-output.txt
      - name: Subjack
        run: |
         ./binaries/subjack -w subdomains-resolved.txt -t 100 -timeout 30 -o subjack-logs.txt -v -c binaries/subjack_fingerprints.json
         cat subjack-logs.txt | grep -v "Not Vulnerable" | tee subjack-output.txt 
      - name: Nuclei
        run: ./binaries/nuclei -l subdomains-resolved.txt -c 100 -stats -t nuclei-templates/takeovers/subdomain-takeover.yaml -o nuclie-output.txt   
      - name: SubOver
        run: cd binaries; chmod +x SubOver; ./SubOver -l subdomains.txt -o subover.txt; cd ..
      - name: Combine Output Files
        run: |
         cat subzy-logs.txt subjack-logs.txt >> sto.log
         if [[ -f subzy-output.txt ]]; then echo "*****Subzy*****" > subdomain-takeovers.txt; cat subzy-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f subjack-output.txt ]]; then echo "*****Subjack*****" >> subdomain-takeovers.txt; cat subjack-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f nuclie-output.txt ]]; then echo "*****Nuceli*****" >> subdomain-takeovers.txt; cat nuclie-output.txt >> subdomain-takeovers.txt; fi
         if [[ -f subover.txt ]]; then echo "*****SubOver*****" >> subdomain-takeovers.txt; cat subover.txt >> subdomain-takeovers.txt; fi
         zip subdomain-takeover.zip subdomain-takeovers.txt sto.log ; xz subdomain-takeover.zip;
      - name: Send Output to Slack
        if: always()
        run: |
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Subdomain-Takeover -F file=@subdomain-takeover.zip.xz
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#Nuclei Template Scan.
  Nuclei-Template-Scan:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         chmod +x binaries/nuclei   
      - name: Nuclei scan
        run: |
         ./binaries/nuclei -l subdomains-resolved.txt -c 100 -stats -silent -t nuclei-templates/ -o nuclie-scan.txt
         xz nuclie-scan.txt
      - name: Send Output to Slack
        if: always()
        run: if [[ -f nuclie-scan.txt.xz ]]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Nuclei-Template-Scan -F file=@nuclie-scan.txt.xz; fi
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  Mass-Nmap-Scan:
    runs-on: ubuntu-latest    
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         sudo apt-get update && sudo apt-get install nmap -y
         pip install python-libnmap
         sudo apt-get install git gcc make libpcap-dev
         git clone https://github.com/robertdavidgraham/masscan
         cd masscan && make -j && cp bin/masscan ../masscanb              
      - name: Masscan
        run: |
         sudo ./masscanb -iL live-ips.txt --rate 10000 -p0-65535 -oX masscan.xml
      - name: Nmap Scan
        run: |
         python masscan_to_nmap.py masscan.xml | tee -a nmap-masscan.txt      
         zip masscan-nmap.zip masscan.xml nmap-masscan.txt 
      - name: Send Output to Slack
        if: always()
        run: |           
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Masscan -F file=@masscan-nmap.zip
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: nmap-output
         path: nmap-masscan.txt
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  Nmap-Vulnerability-Scan:
    runs-on: ubuntu-latest    
    needs: [Mass-Nmap-Scan, Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: nmap-output
      - name: Install Dependencies
        run: |
         ulimit -s ; ulimit -s 65536
         cat nmap-masscan.txt | grep "Getting ready to scan" | cut -d " " -f 5 > ips.txt
         cat nmap-masscan.txt | grep "Getting ready to scan" | cut -d " " -f 8 > ports.txt
         sudo apt-get update && sudo apt-get install nmap -y
         cd /usr/share/nmap/scripts/
         sudo git clone https://github.com/vulnersCom/nmap-vulners.git
         sudo git clone https://github.com/scipag/vulscan
         cd vulscan/utilities/updater/ ; sudo chmod +x updateFiles.sh ; sudo ./updateFiles.sh
      - name: Nmap scan
        run: exec 3<ips.txt ; exec 4<ports.txt ; while IFS= read -r ip <&3 ; IFS= read -r port <&4 ; do nmap -Pn -sV -p $port --script nmap-vulners,vulscan --script-args vulscandb=scipvuldb.csv -oN nmap-vulnerability-scan.txt $ip  ; done ;
      - name: Send Output to Slack
        if: always()
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Nmap-Vulnerability-Scan -F file=@nmap-vulnerability-scan.txt
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  Nmap-UDP-Scan:
    runs-on: ubuntu-latest    
    needs: [Subdomain-Enumeration,Mass-Nmap-Scan, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install nmap -y
      - name: Nmap UDP scan
        run: sudo nmap -Pn -sV -p- -sU -iL live-ips.txt -oA nmap-udp-scan
      - name: Send Output to Slack
        if: always()
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Nmap-UDP-Scan -F file=@nmap-udp-scan.nmap
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#Collect URLs.
  URL-Enumeration:
    runs-on: ubuntu-latest
    needs: Subdomain-Enumeration
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         go env -w GOPATH=~/Downloads
         go get -u github.com/tomnomnom/waybackurls
         go get -u github.com/tomnomnom/gf
         mkdir ~/.gf; cp -r ~/Downloads/src/github.com/tomnomnom/gf/examples ~/.gf
         git clone https://github.com/1ndianl33t/Gf-Patterns
         mv Gf-Patterns/*.json ~/.gf
         cp ~/Downloads/bin/gf . ; cp ~/Downloads/bin/waybackurls .
         chmod +x binaries/gau
      - name: waybackurls & gau
        run: |
         ./waybackurls "$TARGET" > waybackurls.txt 
         ./binaries/gau "$TARGET" > gau.txt
         cat gau.txt | sort -u >> waybackurls.txt
      - name: Patterns
        run: |
         mkdir url-collector-artifacts
         cp waybackurls.txt url-collector-artifacts/
         cat waybackurls.txt | ./gf ssrf | sort -u > url-collector-artifacts/ssrf-params.txt
         cat waybackurls.txt | ./gf sqli | sort -u > url-collector-artifacts/sqli-params.txt
         cat waybackurls.txt | ./gf ssti | sort -u > url-collector-artifacts/ssti-params.txt
         cat waybackurls.txt | ./gf xss | sort -u > url-collector-artifacts/xss-params.txt
         cat waybackurls.txt | ./gf lfi | sort -u > url-collector-artifacts/lfi-params.txt
         cat waybackurls.txt | ./gf rce | sort -u > url-collector-artifacts/rce-params.txt
         cat waybackurls.txt | ./gf redirect | sort -u > url-collector-artifacts/redirect-params.txt
         cat waybackurls.txt | ./gf img-traversal | sort -u > url-collector-artifacts/img-traversal.txt
         zip -r url-collector-artifacts.zip url-collector-artifacts/ ; xz url-collector-artifacts.zip
      - name: Upload URL Collector Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: url-collector-artifacts
         path: url-collector-artifacts/
      - name: Send Output to Slack
        if: always()
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Pattern-Collector -F file=@url-collector-artifacts.zip.xz
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  XSS-Hunt-URL-Collector:
    runs-on: ubuntu-latest
    needs: [URL-Enumeration, Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: url-collector-artifacts 
      - name: Install Dependencies
        run: sudo snap install dalfox       
      - name: Dalfox
        run: dalfox -b "$XSS_HUNTER" file xss-params.txt > xss-url-collector.txt
      - name: Send Outputs to Slack
        if: always()
        run: |
         if [[ -f xss-url-collector.txt ]] ; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-XSS-URL-Collector -F file=@xss-url-collector.txt; fi
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#Parameter Discovery
  Parameter-Discovery:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         git clone https://github.com/devanshbatham/ParamSpider
         cd ParamSpider; pip3 install -r requirements.txt; cd ..
      - name: ParamSpider
        run: python3 ParamSpider/paramspider.py -d "$TARGET" -l high -o paramspider.txt --exclude woff,css,js,png,svg,php,jpg;
      - name: Upload BBP-Public Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: paramspider-artifacts
         path: output/paramspider.txt 
      - name: Send Output to Slack
        if: always()
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Parameter-Discovery -F file=@output/paramspider.txt
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  XSS-Hunter:
    runs-on: ubuntu-latest
    needs: [Parameter-Discovery, Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: paramspider-artifacts        
      - name: Install Dependencies
        run: sudo snap install dalfox       
      - name: Dalfox
        run: dalfox -b "$XSS_HUNTER_URL_TOKEN" file paramspider.txt > xss-paramspider.txt
      - name: Send Outputs to Slack
        if: always()
        run: if [[ -f xss-paramspider.txt ]] ; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-XSS-Paramspider -F file=@xss-paramspider.txt; fi
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#FavIcon Hash Extraction
  Favicon-Hash-Extraction:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2      
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/devanshbatham/FavFreak
         pip3 install -r FavFreak/requirements.txt
      - name: FavFreak
        run: |
         echo https://$TARGET | python3 FavFreak/favfreak.py > favers.txt
         cat favers.txt | grep 'h]' | cut -d ] -f2 | cut -d " " -f2 > favihash.txt
      - name: Send Outputs to Slack
        if: always()
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-FaviHash -F file=@favihash.txt;
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#Javascript Scan
  Javascript-Scan:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2      
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         cd binaries; chmod +x gau subjs hakrawler httpx; cd ..
         git clone https://github.com/GerbenJavado/LinkFinder.git
         cd LinkFinder; sudo python3 setup.py install; sudo pip3 install -r requirements.txt; cd ..
         wget https://raw.githubusercontent.com/m4ll0k/Bug-Bounty-Toolz/master/getjswords.py
         wget https://gist.githubusercontent.com/KathanP19/d2cda2f99c0b60d64b76ee6039b37e47/raw/eb105a4de06502b2732df9d682c61189c3703685/jsvar.sh
         touch js-endpoints.txt js-words.txt js-file-links-live.txt js-xss.txt 
      - name: Javascript Scan
        run: |
         echo "$TARGET" | ./binaries/gau | grep -iE "\.js$" | sort -u > js-file-links.txt
         echo "$TARGET" | ./binaries/subjs >> js-file-links.txt
         echo "$TARGET" | ./binaries/hakrawler -js -depth 2 -scope subs -plain >> js-file-links.txt
         cat js-file-links.txt | ./binaries/httpx -follow-redirects -silent -status-code | grep "[200]" | cut -d ' ' -f1 | sort -u > js-file-links-live.txt;
         python3 LinkFinder/linkfinder.py -d -i https://"$TARGET" -o cli >> js-endpoints.txt;
         cat js-file-links-live.txt | python3 getjswords.py | sort -u > js-words.txt;
         cat js-file-links-live.txt | while read url ; do bash jsvar.sh $url | sort -u | tee js-xss.txt ; done;
         zip js-scan.zip js-endpoints.txt js-words.txt js-file-links-live.txt js-xss.txt ; xz js-scan.zip
      - name: Send Outputs to Slack
        if: always()
        run: |
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-JS-Scan -F file=@js-scan.zip.xz ; fi;
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#Secrets Finder
  Secrets-Finder:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts      
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/m4ll0k/SecretFinder.git
         cd SecretFinder; pip3 install -r requirements.txt
         touch secret-finder.txt gmapapi.txt
      - name: Secrets Finder
        run: |
         cat subdomains-resolved.txt | xargs -I %% bash -c 'python3 SecretFinder/SecretFinder.py -i %% -e -o cli' > secret-finder.txt; 
         cat secret-finder.txt | grep 'google_api' -B 1 | sort -u > gmapapi.txt;
         zip secrets.zip secret-finder.txt gmapapi.txt; xz secrets.zip
      - name: Send Outputs to Slack
        if: always()
        run: |
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Secret-Finder -F file=@secrets.zip
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#Directory Fuzzing
  Directory-Fuzz:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts       
      - name: Install Dependencies
        run: |
         git clone https://github.com/maurosoria/dirsearch.git
         wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/directory-list-2.3-medium.txt
      - name: Directory Fuzzing
        run: |
         python3 dirsearch/dirsearch.py -l subdomains-resolved.txt -t 300 -i 200,201,202,203,204,301,302,303,304 -b -w directory-list-2.3-medium.txt;
         mkdir dir-report ; cp -r dirsearch/reports dir-report ;
         zip -r dirsearch-reports.zip dir-report && xz dirsearch-reports.zip
      - name: Send Outputs to Slack
        if: always()
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Directory-Fuzzing -F file=@dirsearch-reports.zip.xz
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#Dirsearch sensitive files
  File-Fuzz:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts     
      - name: Install Dependencies
        run: git clone https://github.com/maurosoria/dirsearch.git
      - name: Directory Fuzzing
        run: |
         python3 dirsearch/dirsearch.py -l subdomains-resolved.txt -t 300 -i 200,201,202,203,204,301,302,303,304 -b -w wordlists/sensitive-wordlist.txt;
         mkdir file-report ; cp -r dirsearch/reports file-report ;
         zip -r dirsearch-reports.zip file-report && xz dirsearch-reports.zip
      - name: Send Outputs to Slack
        if: always()
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Sensitive-File-Fuzzing -F file=@dirsearch-reports.zip.xz
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#CORS Scanner
  CORS-Scanner:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts      
      - name: Install Dependencies
        run: |
         pip3 install wheel
         sudo apt-get install python3-setuptools
         git clone https://github.com/chenjj/CORScanner.git
         sudo pip3 install -r CORScanner/requirements.txt
      - name: CORS Scanner
        run: python3 CORScanner/cors_scan.py -i subdomains-resolved.txt -t 200 > cors.txt;
      - name: Send Outputs to Slack
        if: always()
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-CORS-Scanner -F file=@cors.txt
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#HeartBleed Scanner
  Heartbleed-Scanner:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts       
      - name: HeartBleed Scan
        run: for line in $(cat subdomains-resolved.txt) ; do echo "QUIT"|openssl s_client -connect $line:443 2>&1|grep 'server extension "heartbeat" (id=15)' || echo $line- safe >> heartbleed.txt ; done
      - name: Send Files to Slack Channel 
        if: always()
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Heartbleed -F file=@heartbleed.txt
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#  SQL-Injection:
#    runs-on: ubuntu-latest   
#    needs: [URL-Enumeration, Subdomain-Enumeration, HTTProber]      
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/download-artifact@v2
#        with:
#         name: url-collector-artifacts
#      - name: Install Dependencies
#        run: git clone https://github.com/sqlmapproject/sqlmap.git
#      - name: sqlmap
#        run: | 
#         mkdir sqlmap-output
#         python3 sqlmap/sqlmap.py -m sqli-params.txt --batch --banner --dbs --output-dir sqlmap-output
#         zip -r sqlmap-output.zip sqlmap-output                         
#      - name: Send Files to Slack Channel 
#        if: always()
#        run: if [[ ! -z $(ls -A sqlmap-output) ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET"-sqlmap -F filename=sqlmap-output.zip -F file=@sqlmap-output.zip; fi 

  S3-Scanner:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         cat subdomains-resolved.txt | cut -d "/" -f 3 > targets-1.txt
         mkdir ~/.aws
         echo "$AWS_CREDS" > ~/.aws/credentials
         git clone https://github.com/sa7mon/S3Scanner.git
         pip3 install -r S3Scanner/requirements.txt
         for word in $(cat wordlists/bucket-wordist.txt); do echo $word.$TARGET >> targets-2.txt ; done;
         sort -u targets-2.txt -o targets-2.txt
         for word in $(cat wordlists/bucket-wordist.txt); do echo $word-$TARGET >> targets-3.txt ; done;
         sort -u targets-3.txt -o targets-3.txt
         touch buckets-{1..3}.txt
      - name: S3 Scanner
        run: |
         python3 S3Scanner/s3scanner.py -l targets-1.txt -o buckets-1.txt
         python3 S3Scanner/s3scanner.py -l targets-2.txt -o buckets-2.txt
         python3 S3Scanner/s3scanner.py -l targets-3.txt -o buckets-3.txt
         zip buckets.zip buckets-{1..3}.txt
      - name: Send Output to Slack
        if: always()
        run: |
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-S3-Scanner -F file=@buckets.zip
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  Aquatone-Webshot:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts 
      - name: Install Dependencies
        run: chmod +x ./binaries/aquatone
      - name: Aquatone
        run: |
         mkdir aquatone-output
         cat subdomains-resolved.txt | ./binaries/aquatone -out aquatone-output/
         zip -r aquatone-output.zip aquatone-output/ && xz aquatone-output.zip
      - name: Send Output to Slack
        if: always()
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Aquatone-Webscreenshot -F file=@aquatone-output.zip.xz     
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  Gochopchop-Scan:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts 
      - name: Install Dependencies
        run: |
         sudo chmod +x binaries/gochopchop
         wget https://raw.githubusercontent.com/michelin/ChopChop/master/chopchop.yml
      - name: GoChopChop
        run: |
         ./binaries/gochopchop scan --url-file subdomains-resolved.txt --export json --export-filename gochopchop-out
         if [[ -f gochopchop-out.json ]]; then zip gochopchop-out.json.zip gochopchop-out.json; fi;
      - name: Send Output to Slack
        if: always()
        run: if [[ -f gochopchop-out.json.zip ]]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-GoChopChop -F file=@gochopchop-out.json; fi;
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  Subdomainizer:
    runs-on: ubuntu-latest              
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/nsonaniya2010/SubDomainizer.git && pip3 install -r SubDomainizer/requirements.txt            
      - name: Subdomanizer
        run: |
         python3 SubDomainizer/SubDomainizer.py -l subdomains-resolved.txt -cop cloud.txt -o subdomains.txt -sop secrets.txt;
         zip subdomainizer.zip cloud.txt subdomains.txt secrets.txt
      - name: Send Output to Slack
        if: always()
        run: |
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Subdomainizer -F file=@subdomainizer.zip ; fi
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  Git-Dorker-Domain:
    runs-on: ubuntu-latest  
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/obheda12/GitDorker.git
         pip3 install -r GitDorker/requirements.txt 
      - name: Git-Dorker-ORG
        run: python3 GitDorker/GitDorker.py --dorks GitDorker/Dorks/alldorksv3 -q "$TARGET"  --token "$GIT_TOKEN" -o git-dorker-domain
      - name: Send Output to Slack
        if: always()
        run: curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Gitdorker-DOMAIN -F file=@git-dorker-domain_gh_dorks.csv
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"
        
  Eyewitness-Webshot:
    runs-on: ubuntu-latest
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts 
      - name: Install Dependencies
        run: git clone https://github.com/FortyNorthSecurity/EyeWitness.git && cd EyeWitness/Python/setup && sudo ./setup.sh     
      - name: Eyewitness
        run: |
         python3 EyeWitness/Python/EyeWitness.py --web -f subdomains-resolved.txt --timeout 120 --no-prompt
         mv `date +"%Y"`* eyewitness_output
         zip -r eyewitness_output.zip eyewitness_output && xz eyewitness_output.zip
      - name: Send Output Files Slack Channel
        if: always()
        run:  curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Web-Screenshots -F file=@eyewitness_output.zip.xz
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  Whatweb:
    runs-on: ubuntu-latest  
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/urbanadventurer/WhatWeb.git
         sudo gem install bundler
         cd WhatWeb/ && bundle install    
      - name: Whatweb
        run: |
         cat subdomains-resolved.txt | cut -d "/" -f 3 > WhatWeb/targets.txt
         cd WhatWeb/
         ./whatweb --input-file=targets.txt --verbose --log-json=whatweb-logs.json
         cp whatweb-logs.json ../  
      - name: Send Output to Slack
        if: always()
        run:  curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Whatweb -F file=@whatweb-logs.json
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

#Collect CNAME
  DNSC:
    runs-on: ubuntu-latest  
    needs: [Subdomain-Enumeration, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         cat subdomains-resolved.txt | cut -d "/" -f 3 > subdomains.txt
         chmod +x dnsc.sh
      - name: DNSC
        run: ./dnsc.sh -l subdomains.txt -o dnsc.csv
      - name: Send Outputs to Slack  
        if: always()
        run:  curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-DNSC -F file=@dnsc.csv
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"

  Slack-Notification:
    runs-on: ubuntu-latest  
    needs: [Subdomain-Enumeration, DNSgen,MassDNS-Resolver, HTTProber, Subdomain-Takeover, Nuclei-Template-Scan, Mass-Nmap-Scan, Nmap-Vulnerability-Scan, Nmap-UDP-Scan, URL-Enumeration, XSS-Hunt-URL-Collector, Parameter-Discovery, XSS-Hunter, Favicon-Hash-Extraction, Javascript-Scan, Secrets-Finder, Directory-Fuzz, File-Fuzz, CORS-Scanner, Heartbleed-Scanner, S3-Scanner, Aquatone-Webshot, Gochopchop-Scan, Subdomainizer, Git-Dorker-Domain, Eyewitness-Webshot, Whatweb, DNSC]
    steps:
      - uses: actions/checkout@v2
      - name: Slack 
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"RECON PRIVATE LARGE COMPLETED FOR DOMAIN - $TARGET"}' "$S_WEBHOOK"
      - name: Job Failure Slack Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - '$TARGET'"}' "$S_WEBHOOK"
