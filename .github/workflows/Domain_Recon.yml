#Important Note:
# Before running this action, make sure you updated following secrets variables in settings.
#  1. DOMAIN
#       example.com
#  2. DOMAIN_IGNORE_HOSTS
#       https://docs.example.com
#  3. DOMAIN_IGNORE_IPS
#       0.0.0.0

name: Domain Recon
 
on:
  workflow_dispatch:

env:
     TARGET_DOMAIN: ${{ secrets.DOMAIN }} 
     TARGET_IGNORE_HOSTS: $ {{ secrets.DOMAIN_IGNORE_HOSTS }}
     TARGET_IGNORE_IPS: $ {{ secrets.DOMAIN_IGNORE_IPS }}
     SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
     SLACK_CHANNEL_NAME: ${{ secrets.SLACK_PRIVATE_BB_CHANNEL_NAME }}


jobs:   

  massdns-resolver:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded 
      - name: Input Files
        run: |
         echo "$TARGET_IGNORE_HOSTS" > ignore-hosts.txt
         echo "$TARGET_IGNORE_IPS" > ignore-ips.txt              
      - name: Install Dependencies
        run: |
         wget --quiet https://raw.githubusercontent.com/ValluvarSploit/Resolver/main/resolvers.txt
         git clone https://github.com/blechschmidt/massdns.git && cd massdns/ && make
         wget https://[ngrok-server-hostname]/subdomains.txt
      - name: DNS Resolver-MassDNS
        run: |
         grep -vf ignore-hosts.txt subdomains.txt > massdns-input.txt
         ./massdns/bin/massdns -r resolvers.txt -t A -o S -w massdns-output.txt massdns-input.txt
         cat massdns-output.txt | awk '{print $1}' | sed 's/.$//' > live-hosts-temp-output.txt
         cat massdns-output.txt | awk '{print $3}' | sort -u | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" > live-ips-output-temp.txt         
         grep -vf ignore-ips.txt live-ips-output-temp.txt > live-ips-output.txt
         tr A-Z a-z < live-hosts-temp-output.txt | tee live-hosts-output.txt
         sort -u live-hosts-output.txt -o live-hosts-output.txt
         sort -u live-ips-output.txt -o live-ips-output.txt  
      - name: Send MassDNS Output Files to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-MassDNS-Live-Hosts-Results -F filename="$TARGET_DOMAIN"-live-hosts.txt -F file=@live-hosts-output.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-MassDNS-Live-IPs-Results -F filename="$TARGET_DOMAIN"-live-ips.txt -F file=@live-ips-output.txt  
      - name: Artifact Files
        run: mkdir bbp-private-artifacts && cp live-hosts-output.txt bbp-private-artifacts/
      - name: Upload BBP-Private Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded
         path: bbp-private-artifacts/
    
    
  httpx-resolver:
    runs-on: ubuntu-latest
    needs: [massdns-resolver]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded         
      - name: Install Dependencies
        run: wget https://github.com/projectdiscovery/httpx/releases/download/v1.0.3/httpx_1.0.3_linux_amd64.tar.gz && tar -xvf httpx_1.0.3_linux_amd64.tar.gz       
      - name: httpx Resolver
        run: |
         ./httpx -l live-hosts-output.txt -o live-httpx-subdomains-raw-output.txt -threads 10000 -silent -stats -cname
         cat live-httpx-subdomains-raw-output.txt | awk '{print $1}' >> live-httpx-subdomains-output.txt
         cat live-httpx-subdomains-output.txt | cut -d "/" -f 3 | tee -a live-httpx-subdomains-hosts-output.txt
      - name: Send httpx Output Files to Slack
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomains-Resolved -F filename="$TARGET_DOMAIN"-subdomains-resolved.txt -F file=@live-httpx-subdomains-output.txt
        # curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-httpx-HTTP-Resolved-Results-Raw -F filename="$TARGET_DOMAIN"-http-resolved-raw.txt -F file=@live-httpx-subdomains-raw-output.txt
        # curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-httpx-HTTP-Resolved-Hosts-Results -F filename="$TARGET_DOMAIN"-http-resolved-hosts.txt -F file=@live-httpx-subdomains-hosts-output.txt
      - name: Artifact Files
        run: |
         mkdir bbp-private-artifacts && cp live-httpx-subdomains-output.txt bbp-private-artifacts/
      - name: Upload BBP-Private Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded
         path: bbp-private-artifacts/


  subdomain-takeover:
    runs-on: ubuntu-latest
    needs: [httpx-resolver]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded 
      - name: Install Dependencies
        run: |
         go get -u -v github.com/lukasikic/subzy && cp /home/runner/go/bin/subzy .
         go get -v github.com/haccer/subjack && cp /home/runner/go/bin/subjack .
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         wget https://github.com/projectdiscovery/nuclei/releases/download/v2.2.0/nuclei_2.2.0_linux_amd64.tar.gz && tar -xzvf nuclei_2.2.0_linux_amd64.tar.gz          
      - name: Subzy
        run: |
         ./subzy --targets=live-httpx-subdomains-output.txt -concurrency 50 | tee subzy-logs.txt
         cat subzy-logs.txt | grep -v "NOT VULNERABLE" > subzy-output.txt   
      - name: Subjack
        run: |
         ./subjack -w live-httpx-subdomains-output.txt -t 100 -timeout 30 -o subjack-logs.txt -v -c /home/runner/go/src/github.com/haccer/subjack/fingerprints.json
         cat subjack-logs.txt | grep -v "Not Vulnerable" | tee subjack-output.txt
      - name: Nuclei
        run: ./nuclei -l live-httpx-subdomains-output.txt -c 100 -stats -t nuclei-templates/takeovers/ -o nuclie-output.txt
      - name: Combine Outputs
        run: |
         if [[ -f subzy-logs.txt ]]; then echo "*****Subzy*****" > "$TARGET_DOMAIN"-subdomain-takeover-logs.txt; cat subzy-logs.txt >> "$TARGET_DOMAIN"-subdomain-takeover-logs.txt; fi
         if [[ -f subjack-logs.txt ]]; then echo "*****Subjack*****" >> "$TARGET_DOMAIN"-subdomain-takeover-logs.txt; cat subjack-logs.txt >> "$TARGET_DOMAIN"-subdomain-takeover-logs.txt; fi
         if [[ -f subzy-output.txt ]]; then echo "*****Subzy*****" > "$TARGET_DOMAIN"-subdomain-takeover-results.txt; cat subzy-output.txt >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; fi
         if [[ -f subjack-output.txt ]]; then echo "*****Subjack*****" >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; cat subjack-output.txt >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; fi
         if [[ -f nuclie-output.txt ]]; then echo "*****Nuceli*****" >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; cat nuclie-output.txt >> "$TARGET_DOMAIN"-subdomain-takeover-results.txt; fi
      - name: Send Output Files Slack Channel
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomain-Takeover-Logs -F filename="$TARGET_DOMAIN"-subdomain-takeover-logs.txt -F file=@"$TARGET_DOMAIN"-subdomain-takeover-logs.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomain-Takeover-Results -F filename="$TARGET_DOMAIN"-subdomain-takeover-results.txt -F file=@"$TARGET_DOMAIN"-subdomain-takeover-results.txt


  nuclei-scan:
    runs-on: ubuntu-latest  
    needs: [httpx-resolver]   
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded  
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         wget --quiet https://github.com/projectdiscovery/nuclei/releases/download/v2.2.0/nuclei_2.2.0_linux_amd64.tar.gz
         tar -xzvf nuclei_2.2.0_linux_amd64.tar.gz
      - name: Nuclei scan
        run: |        
         ./nuclei -l live-httpx-subdomains-output.txt -c 500 -stats -silent -t nuclei-templates/ -exclude nuclei-templates/fuzzing/wp-plugin-scan.yaml -exclude nuclei-templates/fuzzing/basic-auth-bruteforce.yaml -exclude nuclei-templates/default-credentials/ -o nuclie-output.txt
         if [[ -f nuclie-output.txt ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Nuclei-Scan-Results -F filename="$TARGET_DOMAIN"-nuclei-scan.txt -F file=@nuclie-output.txt; fi
         
         
  js-hunter:
    runs-on: ubuntu-latest
    needs: [httpx-resolver]            
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded 
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/nsonaniya2010/SubDomainizer.git && pip3 install -r SubDomainizer/requirements.txt            
      - name: Subdomanizer
        run: |
         python3 SubDomainizer/SubDomainizer.py -l live-httpx-subdomains-output.txt -cop cloud.txt -o subdomains.txt -sop secrets.txt
      - name: Send Output Files Slack Channel
        run: |
         subdomains_count=$(cat subdomains.txt | wc -w)
         secrets_count=$(cat secrets.txt | wc -w)
         cloud_count=$(cat cloud.txt | wc -w)
         if [[ -f subdomains.txt ]] && [[ "$subdomains_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomainizer-Results -F filename="$TARGET_DOMAIN"-subdomainizer-subdomains.txt -F file=@subdomains.txt ; fi
         if [[ -f cloud.txt ]] && [[ "$cloud_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomainizer-Results -F filename="$TARGET_DOMAIN"-subdomainizer-cloud.txt -F file=@cloud.txt ; fi
         if [[ -f secrets.txt ]] && [[ "$secrets_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomainizer-Results -F filename="$TARGET_DOMAIN"-subdomainizer-secrets.txt -F file=@secrets.txt ; fi


  broken-link-hijacking:
    runs-on: ubuntu-latest    
    needs: [httpx-resolver]        
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded 
      - name: Install Dependencies
        run: sudo npm install broken-link-checker -g                         
      - name: blh
        run: |
         while read url ; do printf "Site: $url" | tee -a blh-output.txt; blc -rof --filter-level 3 $url | tee -a blh-output.txt; done < live-httpx-subdomains-output.txt
      - name: Send Output Files Slack Channel
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-blh-Results -F filename="$TARGET_DOMAIN"-blh.txt -F file=@blh-output.txt


  http-smuggler:
    runs-on: ubuntu-latest
    needs: [httpx-resolver]                               
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded 
      - name: Install Dependencies
        run: git clone https://github.com/defparam/smuggler.git
      - name: Smuggler
        run: |
         cat live-httpx-subdomains-output.txt | cut -d "/" -f 3 | python3 smuggler/smuggler.py --log http-smuggler.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-HTTP-Smuggler-Results -F filename="$TARGET_DOMAIN"-http-smuggler.txt -F file=@http-smuggler.txt
         
         
  whatweb:
    runs-on: ubuntu-latest  
    needs: [httpx-resolver]  
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded 
      - name: Install Dependencies
        run: |
         git clone https://github.com/urbanadventurer/WhatWeb.git
         sudo gem install bundler
         cd WhatWeb/ && bundle install    
      - name: Whatweb
        run: |
         cat live-httpx-subdomains-output.txt | cut -d "/" -f 3 > WhatWeb/targets.txt
         cd WhatWeb/
         ./whatweb --input-file=targets.txt --verbose --log-json=whatweb-logs.json
         cp whatweb-logs.json ../  
      - name: Send Outputs to Slack Channel     
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Whatweb-Results -F filename="$TARGET_DOMAIN"-whatweb-logs.txt -F file=@whatweb-logs.json


  web-screenshot:
    runs-on: ubuntu-latest
    needs: [httpx-resolver] 
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded 
      - name: Install Dependencies
        run: git clone https://github.com/FortyNorthSecurity/EyeWitness.git && cd EyeWitness/Python/setup && sudo ./setup.sh        
      - name: Eyewitness
        run: |
         python3 EyeWitness/Python/EyeWitness.py --web -f live-httpx-subdomains-output.txt --timeout 120 --no-prompt
         mv `date +"%Y"`* eyewitness_output
         zip -r eyewitness_output.zip eyewitness_output && xz eyewitness_output.zip        
      - name: Send Output Files Slack Channel
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Web-Screenshots -F filename="$TARGET_DOMAIN"-web-screens.zip.xz -F file=@eyewitness_output.zip.xz
                 

  url-collector:
    runs-on: ubuntu-latest 
    needs: [httpx-resolver]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded 
      - name: Install Dependencies
        run: |
         go get -u github.com/tomnomnom/gf && cp /home/runner/go/bin/gf .
         git clone https://github.com/1ndianl33t/Gf-Patterns && mkdir ~/.gf && cp -r Gf-Patterns/*.json ~/.gf/
         wget --quiet https://github.com/tomnomnom/qsreplace/releases/download/v0.0.1/qsreplace-linux-386-0.0.1.tgz && tar xvf qsreplace-linux-386-0.0.1.tgz
         go get github.com/tomnomnom/waybackurls && cp /home/runner/go/bin/waybackurls .
         wget --quiet https://github.com/lc/gau/releases/download/v1.1.0/gau_1.1.0_linux_amd64.tar.gz && tar xvf gau_1.1.0_linux_amd64.tar.gz
      - name: waybackurls
        run: |
         ./waybackurls "$TARGET_DOMAIN" | tee waybackurls-output.txt 
         cat live-httpx-subdomains-output.txt | ./waybackurls | tee -a waybackurls-output.txt 
      - name: gau
        run: echo "$TARGET_DOMAIN" | ./gau | tee gau-output.txt      
      - name: Combine Output Files
        run: |
         cat waybackurls-output.txt gau-output.txt | uniq | tee all-urls-tmp.txt
         zip all-urls.txt.zip all-urls-tmp.txt && xz all-urls.txt.zip
         cat all-urls-tmp.txt | grep "=" | egrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt|js)" | tee temp-output.txt
         cat temp-output.txt | ./qsreplace FUZZ | tee -a all-urls-unqiue.txt
         zip all-urls-unqiue.txt.zip all-urls-unqiue.txt && xz all-urls-unqiue.txt.zip
      - name: Patterns
        run: |
         mkdir patterns-urls
         cat all-urls-tmp.txt | ./gf interestingEXT | tee -a patterns-urls/interestingEXT-params.txt
         cat all-urls-tmp.txt | ./gf jsvar | tee -a patterns-urls/jsvar-params.txt          
         cat all-urls-unqiue.txt | ./gf interestingparams | tee -a patterns-urls/interestingparams-params.txt
         cat all-urls-unqiue.txt | ./gf xss | tee -a patterns-urls/xss-params.txt
         cat all-urls-unqiue.txt | ./gf sqli | tee -a patterns-urls/sqli-params.txt          
         cat all-urls-unqiue.txt | ./gf lfi | tee -a patterns-urls/lfi-params.txt          
         cat all-urls-unqiue.txt | ./gf ssrf | tee -a patterns-urls/ssrf-params.txt          
         cat all-urls-unqiue.txt | ./gf redirect | tee -a patterns-urls/redirect-params.txt          
         cat all-urls-unqiue.txt | ./gf ssti | tee -a patterns-urls/ssti-params.txt          
         cat all-urls-unqiue.txt | ./gf rce | tee -a patterns-urls/rce-params.txt          
         cat all-urls-unqiue.txt | ./gf idor | tee -a patterns-urls/idor-params.txt          
         cat all-urls-unqiue.txt | ./gf debug_logic | tee -a patterns-urls/debug_logic-params.txt
         cat all-urls-unqiue.txt | ./gf img-traversal | tee -a patterns-urls/img-traversal-params.txt
         cat all-urls-unqiue.txt | ./gf interestingsubs | tee -a patterns-urls/interestingsubs-params.txt
         zip -r patterns-urls.zip patterns-urls && xz patterns-urls.zip       
      - name: Send Outputs to Slack Channel
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Collect-All-Urls -F filename="$TARGET_DOMAIN"-all-urls.zip.xz -F file=@all-urls.txt.zip.xz
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Collect-All-Unique-Urls -F filename="$TARGET_DOMAIN"-all-urls-unqiue.txt.zip.xz -F file=@all-urls-unqiue.txt.zip.xz
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-GF-Patterns-Urls -F filename="$TARGET_DOMAIN"-patterns-urls.txt.zip.xz -F file=@patterns-urls.zip.xz
      - name: Upload BBP-Private Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded
         path: patterns-urls/


  xss-hunter:
    runs-on: ubuntu-latest 
    needs: [url-collector]         
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: bbp-private-artifacts-uploaded
      - name: Install Dependencies
        run: |
         go get -u github.com/tomnomnom/hacks/kxss && cp /home/runner/go/bin/kxss .
         sudo snap install dalfox         
      - name: KXSS & Dalfox
        run: |
         cat xss-params.txt | ./kxss | awk '{print $9}' | dalfox pipe -b "$XSS_HUNTER_URL_TOKEN" | tee -a xss-vulnerable-urls.txt
      - name: Send Outputs to Slack Channel
        run: |
         count=$(cat xss-vulnerable-urls.txt | wc -w)
         if [[ -f xss-vulnerable-urls.txt ]] && [[ "$count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-XSS-Results -F filename="$TARGET_DOMAIN"-xss-poc-urls.txt -F file=@xss-vulnerable-urls.txt; fi
