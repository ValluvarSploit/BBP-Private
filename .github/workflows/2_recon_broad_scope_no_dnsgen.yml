name: Recon Broad Scope Private
on:
  workflow_dispatch:
env:
      TARGET: ${{ secrets.DOMAIN_LARGE_PRIVATE }}
      HOST: ${{ secrets.NGROK_URL }}
      XSS_HUNTER: ${{ secrets.XSS_HUNTER }}
      AWS_CREDS: ${{ secrets.AWS_CREDENTIALS }}
      GIT_ORG: ${{ secrets.TARGET_GITHUB_ORG }}
      GIT_REPO: ${{ secrets.GIT_REPO_URLS }}
      GIT_TOKEN: ${{ secrets.TOKEN }}
      S_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
      S_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PRIVATE }}
      S_URL: https://slack.com/api/files.upload
jobs:
  DNSx:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 
      - name: Install Dependencies
        run: |
         wget $HOST/subdomains.txt
         wget -q -i requirements/dnsx.txt; tar -xzvf dnsx_1.0.3_linux_amd64.tar.gz
      - name: DNSx
        run: |
         ./dnsx -l subdomains.txt -resp -a -r resolvers.txt -o dnsx.txt
         cat dnsx.txt | awk '{print $1}' | sort -u > subdomains-live-1.txt
         cat dnsx.txt | awk '{print $2}' | cut -d "[" -f 2 | cut -d "]" -f 1 | sort -u > ips-live.txt
         sort -u subdomains-live-1.txt -o subdomains-live-1.txt; sort -u ips-live.txt -o ips-live.txt;
         xz -k ips-live.txt
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: dnsx-artifacts
         path: |
          subdomains-live-1.txt
          ips-live.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
  
  HTTProber:
    runs-on: ubuntu-latest
    needs: [DNSx]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: dnsx-artifacts
      - name: Install Dependencies
        run: |
         go env -w GOPATH=~/Downloads;
         go get -u github.com/tomnomnom/httprobe;
         cp ~/Downloads/bin/httprobe .; 
         wget -q -i requirements/httprober.txt; tar -xzvf httpx_1.0.5_linux_amd64.tar.gz;
      - name: HTTProber
        run: |
         cat subdomains-live-1.txt | ./httprobe | tee subdomains-live.txt; 
         ./httpx -l subdomains-live.txt -follow-redirects -status-code -vhost -content-length -cname -cdn -csp-probe -ip -web-server -location -websocket -title -tech-detect -no-fallback -threads 300 -silent -timeout 15 -o httpx.out
         cat subdomains-live.txt | cut -d "/" -f 3 > subdomains-host.txt; sort -u subdomains-host.txt -o subdomains-host.txt
         zip assets-live.zip subdomains-live.txt ips-live.txt subdomains-host.txt httpx.out
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: httprober-artifacts
         path: |
          subdomains-live.txt
          ips-live.txt
          subdomains-host.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Live-assets -F file=@assets-live.zip;

  Subdomain-Takeover:
    if: always()
    runs-on: ubuntu-latest
    needs: [HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         touch subjack-logs.txt ;
         git clone https://github.com/projectdiscovery/nuclei-templates.git;
         go env -w GOPATH=~/Downloads;
         go get github.com/haccer/subjack
         go get github.com/lukasikic/subzy
         go get github.com/Ice3man543/SubOver
         cp ~/Downloads/bin/subjack .; cp ~/Downloads/bin/subzy .; cp ~/Downloads/bin/SubOver .; cp binaries/providers.json . 
         wget --quiet https://github.com/projectdiscovery/nuclei/releases/download/v2.3.2/nuclei_2.3.2_linux_amd64.tar.gz; tar -xzvf nuclei_2.3.2_linux_amd64.tar.gz
      - name: Subzy
        run: |
         ./subzy --targets=subdomains-live.txt -concurrency 50 | tee subzy.logs ;
         cat subzy.logs | grep -v "NOT VULNERABLE" > subzy.out;
      - name: Subjack
        run: |
         ./subjack -a -ssl -w subdomains-live.txt -t 50 -timeout 30 -o subjack.logs -v -c binaries/subjack_fingerprints.json ;
         cat subjack.logs | grep -v "Not Vulnerable" | tee subjack.out;
      - name: Nuclei
        run: ./nuclei -l subdomains-live.txt -c 100 -stats -t nuclei-templates/takeovers -o nuclie.out ;
      - name: SubOver
        run: ./SubOver -l subdomains-host.txt -o subover.out;
      - name: Combine Output Files
        run: |
         cat subzy.logs subjack.logs >> sto.logs
         if [[ -f subzy.out ]]; then echo "*****Subzy*****" > subdomain-takeovers.out; cat subzy.out >> subdomain-takeovers.out; fi ;
         if [[ -f subjack.out ]]; then echo "*****Subjack*****" >> subdomain-takeovers.out; cat subjack.out >> subdomain-takeovers.out; fi ;
         if [[ -f nuclie.out ]]; then echo "*****Nuceli*****" >> subdomain-takeovers.out; cat nuclie.out >> subdomain-takeovers.out; fi ;
         if [[ -f subover.out ]]; then echo "*****SubOver*****" >> subdomain-takeovers.out; cat subover.out >> subdomain-takeovers.out; fi ;
         zip subdomain-takeover.zip subdomain-takeovers.out sto.logs ; xz subdomain-takeover.zip ;
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Subdomain-Takeover -F file=@subdomain-takeover.zip.xz ;

  MEG-HomePage:
    if: always()
    runs-on: ubuntu-latest
    needs: [Subdomain-Takeover, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         go env -w GOPATH=~/Downloads ;
         go get -u github.com/tomnomnom/meg
         cp ~/Downloads/bin/meg . ; 
      - name: MEG
        run: |
         ./meg -d 10 -c 200 / subdomains-live.txt
         zip -r meg-home.zip out/
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-MEG-Homepage -F file=@meg-home.zip

  Nuclei-Template-Scan:
    if: always()
    runs-on: ubuntu-latest
    needs: [MEG-HomePage, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git ;
         wget --quiet https://github.com/projectdiscovery/nuclei/releases/download/v2.3.2/nuclei_2.3.2_linux_amd64.tar.gz
         tar -xzvf nuclei_2.3.2_linux_amd64.tar.gz
      - name: Nuclei scan
        run: |
         ./nuclei -l subdomains-live.txt -c 100 -stats -t nuclei-templates/ -o nuclie-scan.out ;
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          if [[ -f nuclie-scan.out ]]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Nuclei-Template-Scan -F file=@nuclie-scan.out; fi ;

  Mass-Nmap-Scan:
    if: always()
    runs-on: ubuntu-latest    
    needs: [Nuclei-Template-Scan, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         sudo apt-get install xsltproc
         wget -q https://raw.githubusercontent.com/honze-net/nmap-bootstrap-xsl/stable/nmap-bootstrap.xsl
         sudo apt-get update && sudo apt-get install nmap -y ;
         pip install python-libnmap ;
         sudo apt-get install git gcc make libpcap-dev ;
         git clone https://github.com/robertdavidgraham/masscan ;
         cd masscan && make -j && cp bin/masscan ../masscanb ;         
      - name: Masscan
        run: |
         sudo ./masscanb -iL ips-live.txt --rate 10000 -p0-65535 -oX masscan.xml ;
      - name: Nmap Scan
        run: |
         python masscan_to_nmap.py masscan.xml | tee -a nmap-masscan.out ;
         xsltproc -o masscan.html nmap-bootstrap.xsl masscan.xml
         xz masscan.html
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: nmap-output
         path: nmap-masscan.out         
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Masscan -F file=@masscan.html

  Nmap-Vulnerability-Scan:
    if: always()
    runs-on: ubuntu-latest    
    needs: [Mass-Nmap-Scan, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: nmap-output
      - name: Install Dependencies
        run: |
         sudo apt-get install xsltproc
         wget -q https://raw.githubusercontent.com/honze-net/nmap-bootstrap-xsl/stable/nmap-bootstrap.xsl
         ulimit -s ; ulimit -s 65536 ;
         cat nmap-masscan.out | grep "Getting ready to scan" | cut -d " " -f 5 > ips.txt ;
         cat nmap-masscan.out | grep "Getting ready to scan" | cut -d " " -f 8 > ports.txt ;
         sudo apt-get update && sudo apt-get install nmap -y ;
         cd /usr/share/nmap/scripts/ ;
         sudo git clone https://github.com/vulnersCom/nmap-vulners.git ;
         sudo git clone https://github.com/scipag/vulscan ;
         cd vulscan/utilities/updater/ ; sudo chmod +x updateFiles.sh ; sudo ./updateFiles.sh; cd ..;
      - name: Nmap scan
        run: |
         exec 3<ips.txt ; exec 4<ports.txt ; while IFS= read -r ip <&3 ; IFS= read -r port <&4 ; do nmap -Pn -T3 -sV -p $port --script nmap-vulners,vulscan --script-args vulscandb=scipvuldb.csv -oA nmap-vuln-scan $ip  ; done ;  
         xsltproc -o nmap-vuln-scan.html nmap-bootstrap.xsl nmap-vuln-scan.xml
         zip nmap-vuln-scan.zip nmap-vuln-scan.html nmap-vuln-scan.nmap
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Nmap-Vulnerability-Scan -F file=@nmap-vuln-scan.zip

  nmap-tcp-udp-scan:
    if: always()
    runs-on: ubuntu-latest    
    needs: [Nmap-Vulnerability-Scan, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         sudo apt-get install xsltproc
         wget -q https://raw.githubusercontent.com/honze-net/nmap-bootstrap-xsl/stable/nmap-bootstrap.xsl
         sudo apt-get update && sudo apt-get install nmap -y
      - name: Nmap TCP-UDP scan
        run: |
          sudo nmap -Pn -sV -sU -pT:1433,2049,2301,2381,3389,4242,7001,7002,7070,8000,8001,8005,8080,8100,8810,8820,8830,8888,9090,10000,U:69,137,138,161,500 -iL ips-live.txt  -oA nmap-tcp-udp-scan -v
          xsltproc -o nmap-tcp-udp-scan.html nmap-bootstrap.xsl nmap-tcp-udp-scan.xml
          zip -r nmap-1000-scan.zip nmap-tcp-udp-scan.html nmap-tcp-udp-scan.nmap
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Nmap-TCP-UDP-Scan -F file=@nmap-1000-scan.zip

  URL-Enumeration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git
         bash Domain_Monitoring/scripts/url-enumeration.sh "$TARGET"
      - name: Upload URL Collector Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: url-collector-artifacts
         path: url-collector-artifacts/
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Pattern-Collector -F file=@url-collector-artifacts.zip.xz ;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;

  KXSS-Enum:
    runs-on: ubuntu-latest
    needs: URL-Enumeration
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: url-collector-artifacts 
      - name: Install Dependencies
        run: |
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git
         bash Domain_Monitoring/scripts/kxss.sh waybackurls.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-KXSS -F file=@kxss.out ;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;

  XSS-Hunt:
    if: always()
    runs-on: ubuntu-latest
    needs: [URL-Enumeration, HTTProber, KXSS-Enum]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: url-collector-artifacts 
      - name: Install Dependencies
        run: |
         wget --quiet https://github.com/hahwul/dalfox/releases/download/v2.3.6/dalfox_2.3.6_linux_amd64.tar.gz
         gunzip dalfox_2.3.6_linux_amd64.tar.gz ; tar -xvf dalfox_2.3.6_linux_amd64.tar
       #sudo snap install dalfox          
      - name: Dalfox
        run: ./dalfox -b "$XSS_HUNTER" file xss-params.txt > xss-url-collector.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          if [[ -f xss-url-collector.txt ]] ; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-XSS-URL-Collector -F file=@xss-url-collector.txt; fi

  Parameter-Discovery:
    if: always()
    runs-on: ubuntu-latest
    needs: [HTTProber, XSS-Hunt]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git
         bash Domain_Monitoring/scripts/parameter-discover.sh subdomains-host.txt
      - name: Upload BBP-Public Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: paramspider-artifacts
         path: paramspider.txt 
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Parameter-Discovery -F file=@paramspider-out.zip
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"

  XSS-Hunter:
    if: always()
    runs-on: ubuntu-latest
    needs: [Parameter-Discovery, HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: paramspider-artifacts        
      - name: Install Dependencies
        run: |
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git
         bash Domain_Monitoring/scripts/xss-hunt-paramspider.sh paramspider.txt "$XSS_HUNTER"
      - name: Output & Slack Notification
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
         if [[ -f xss-paramspider.txt ]] ; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-XSS-Paramspider -F file=@xss-paramspider.txt; fi
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"

  Favicon-Hash-Extraction:
    runs-on: ubuntu-latest
    needs: [HTTProber]
    steps:
      - uses: actions/checkout@v2      
      - name: Install Dependencies
        run: |
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git
         bash Domain_Monitoring/scripts/favicon.sh "$TARGET"
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-FaviHash -F file=@favihash.txt;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"

  Javascript-Scan:
    runs-on: ubuntu-latest
    needs: [HTTProber]
    steps:
      - uses: actions/checkout@v2      
      - name: Install Dependencies
        run: |
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git
         bash Domain_Monitoring/scripts/js-scan.sh
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-JS-Scan -F file=@js-scan.zip.xz ;
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"

  Secrets-Finder:
    if: always()
    runs-on: ubuntu-latest
    needs: [HTTProber, Javascript-Scan]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts      
      - name: Install Dependencies
        run: |
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git
         bash Domain_Monitoring/scripts/secret_finder.sh subdomains-live.txt        
      - name: Output & Slack Notification
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
         if [[ -f secrets.zip.xz ]]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Secret-Finder -F file=@secrets.zip.xz ; fi
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"

  Dirsearch-Dir:
    if: always()
    runs-on: ubuntu-latest
    needs: [HTTProber, Secrets-Finder]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts       
      - name: Dirsearch
        run: |
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git
         bash Domain_Monitoring/scripts/dirsearch-dir.sh subdomains-live.txt
      - name: Output &  Slack Notification
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')    
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Dirsearch-Dirs -F file=@dirsearch-dir-reports.zip.xz
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"

  Dirsearch-File:
    if: always()
    runs-on: ubuntu-latest
    needs: [HTTProber, Dirsearch-Dir]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts     
      - name: Install Dependencies
        run: |
         wget $HOST/subdomains-live.txt 
         echo "$CUSTOM_GIT_CREDS" > ~/.git-credentials
         echo "$CUSTOM_GIT_CONFIG" > ~/.gitconfig
         git clone https://github.com/ValluvarSploit/Domain_Monitoring.git
         bash Domain_Monitoring/scripts/dirsearch-file.sh subdomains-live.txt
      - name: Output &  Slack Notification
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')   
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Dirsearch-File -F file=@dirsearch-file-reports.zip.xz
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          
  CORS-Scanner:
    runs-on: ubuntu-latest
    needs: [HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts      
      - name: Install Dependencies
        run: |
         pip3 install wheel
         sudo apt-get install python3-setuptools
         git clone https://github.com/chenjj/CORScanner.git
         sudo pip3 install -r CORScanner/requirements.txt
      - name: CORS Scanner
        run: python3 CORScanner/cors_scan.py -v -i subdomains-live.txt -t 50 > cors.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-CORS-Scanner -F file=@cors.txt

#HeartBleed Scanner
  Heartbleed-Scanner:
    runs-on: ubuntu-latest
    needs: [HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts       
      - name: HeartBleed Scan
        run: for line in $(cat subdomains-live.txt) ; do echo "QUIT"|openssl s_client -connect $line:443 2>&1|grep 'server extension "heartbeat" (id=15)' || echo $line- safe >> heartbleed.txt ; done
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Heartbleed -F file=@heartbleed.txt

  S3-Scanner:
    runs-on: ubuntu-latest
    needs: [HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         wget $HOST/subdomains-host.txt
         mkdir ~/.aws; echo "$AWS_CREDS" > ~/.aws/credentials
         pip3 install s3scanner
         for word in $(cat wordlists/bucket-wordist.txt); do echo $word.$TARGET >> targets-2.txt ; done; sort -u targets-2.txt -o targets-2.txt
         for word in $(cat wordlists/bucket-wordist.txt); do echo $word-$TARGET >> targets-3.txt ; done; sort -u targets-3.txt -o targets-3.txt
         touch buckets-{1..3}.txt
      - name: S3 Scanner
        run: |
         s3scanner scan --buckets-file subdomains-host.txt | grep -v "bucket_not_exist" | tee buckets-1.txt
         s3scanner scan --buckets-file targets-2.txt | grep -v "bucket_not_exist" | tee buckets-2.txt
         s3scanner scan --buckets-file targets-3.txt | grep -v "bucket_not_exist" | tee buckets-3.txt
         cat buckets-{1..3}.txt | sort -u > buckets.txt
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-S3-Scanner -F file=@buckets.txt

  Aquatone:
    runs-on: ubuntu-latest
    needs: [HTTProber]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts 
      - name: Install Dependencies
        run: |
         go env -w GOPATH=~/Downloads;
         go get github.com/michenriksen/aquatone
         cp ~/Downloads/bin/aquatone .;
         sudo snap install chromium 
      - name: Aquatone
        run: |
         mkdir aquatone-output
         cat subdomains-live.txt | ./aquatone -chrome-path /snap/bin/chromium -threads 40 -silent --ports xlarge -out aquatone-output/ 
         zip -r aquatone-output.zip aquatone-output/ && xz aquatone-output.zip   
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Aquatone-Webscreenshot -F file=@aquatone-output.zip.xz

  Gochopchop-Scan:
    if: always()
    runs-on: ubuntu-latest
    needs: [HTTProber, Aquatone]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts 
      - name: Install Dependencies
        run: |
         wget -q https://github.com/michelin/ChopChop/releases/download/v1.0.0/ChopChop_linux_amd64.tar.gz; tar -xzvf ChopChop_linux_amd64.tar.gz; mv ChopChop_linux_amd64 chopchop
         wget https://raw.githubusercontent.com/michelin/ChopChop/master/chopchop.yml
      - name: GoChopChop
        run: |
         ./chopchop scan --url-file subdomains-live.txt --export json --export-filename gochopchop-out
         if [[ -f gochopchop-out.json ]]; then zip gochopchop-out.json.zip gochopchop-out.json; fi;
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK"
          if [[ -f gochopchop-out.json.zip ]]; then curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-GoChopChop -F file=@gochopchop-out.json; fi;

  Subdomainizer:
    if: always()
    runs-on: ubuntu-latest              
    needs: [HTTProber, Gochopchop-Scan]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/nsonaniya2010/SubDomainizer.git && pip3 install -r SubDomainizer/requirements.txt            
      - name: Subdomanizer
        run: |
         python3 SubDomainizer/SubDomainizer.py -l subdomains-live.txt -cop cloud.txt -o subdomains.txt -sop secrets.txt;
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          zip subdomainizer.zip cloud.txt subdomains.txt secrets.txt ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Subdomainizer -F file=@subdomainizer.zip ;

  Git-Dorker-Domain:
    if: always()
    runs-on: ubuntu-latest  
    needs: [HTTProber, Subdomainizer]
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/obheda12/GitDorker.git
         pip3 install -r GitDorker/requirements.txt 
      - name: Git-Dorker-ORG
        run: |
         python3 GitDorker/GitDorker.py --dorks GitDorker/Dorks/alldorksv3 -q "$TARGET"  --token "$GIT_TOKEN" -o git-dorker-domain
         xz git-dorker-domain_gh_dorks.csv
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Gitdorker-DOMAIN -F file=@git-dorker-domain_gh_dorks.csv.xz ;
        
  Eyewitness:
    if: always()
    runs-on: ubuntu-latest
    needs: [HTTProber, Git-Dorker-Domain]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts 
      - name: Install Dependencies
        run: git clone https://github.com/FortyNorthSecurity/EyeWitness.git && cd EyeWitness/Python/setup && sudo ./setup.sh     
      - name: Eyewitness
        run: |
         python3 EyeWitness/Python/EyeWitness.py --web -f subdomains-live.txt --timeout 120 --no-prompt
         mv `date +"%Y"`* eyewitness_output
         zip -r eyewitness_output.zip eyewitness_output && xz eyewitness_output.zip
      - name: Job Stauts Slack Notification
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Web-Screenshots -F file=@eyewitness_output.zip.xz ;

  Whatweb:
    if: always()
    runs-on: ubuntu-latest  
    needs: [HTTProber, Eyewitness]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         git clone https://github.com/urbanadventurer/WhatWeb.git
         sudo gem install bundler
         cd WhatWeb/ && bundle install    
      - name: Whatweb
        run: |
         ./WhatWeb/whatweb --input-file=subdomains-host.txt --verbose --log-json=whatweb-logs.json
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-Whatweb -F file=@whatweb-logs.json
  DNSC:
    if: always()
    runs-on: ubuntu-latest  
    needs: [HTTProber, Whatweb]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         chmod +x dnsc.sh
      - name: DNSC
        run: ./dnsc.sh -l subdomains-host.txt -o dnsc.csv
      - name: Output & Slack Notification
        if: always()
        run: |
          S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
          curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
          curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-DNSC -F file=@dnsc.csv ;

  broken-link-checker-light:
    if: always()
    runs-on: ubuntu-latest
    needs: [HTTProber, DNSC]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         sudo npm install broken-link-checker -g    
      - name: Broken Link Checker
        run: |
         for url in $(cat subdomains-live.txt ) ; do blc -of --filter-level 0 $url | tee -a blc-light.txt; done ;
      - name: Output & Slack Notification
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
         cat blc-light.txt | grep -v "├───OK───" > blc-light-broken.txt ;
         zip blc-light.zip blc-light.txt blc-light-broken.txt ; xz blc-light.zip
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-BLC-Light -F file=@blc-light.zip.xz ;

  broken-link-checker-full:
    if: always()
    runs-on: ubuntu-latest
    needs: [HTTProber, broken-link-checker-light]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
         name: httprober-artifacts
      - name: Install Dependencies
        run: |
         sudo npm install broken-link-checker -g    
      - name: Broken Link Checker
        run: |
         for url in $(cat subdomains-live.txt) ; do blc -rof --filter-level 3 $url | tee -a blc-full.txt; done ;
      - name: Output & Slack Notification
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
         cat blc-full.txt | grep -v "├───OK───" > blc-full-broken.txt ;
         zip blc-full.zip blc-full.txt blc-full-broken.txt ; xz blc-full.zip
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
         curl "$S_URL" -F token="$S_TOKEN" -F channels="$S_CHANNEL" -F title="$TARGET"-BLC-Full -F file=@blc-full.zip.xz ;

  Gitleaks:
    if: always()
    runs-on: ubuntu-latest  
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         echo "$GIT_REPO" > git_repo_url.txt
         cat git_repo_url.txt | head
         go env -w GOPATH=~/Downloads;
         GO111MODULE=on go get github.com/zricethezav/gitleaks/v7
         cp ~/Downloads/bin/gitleaks .; 
         cat git_repo_url.txt | cut -d : -f 2 | sed "s/^..//" > git-repo.txt
         mkdir gitleaks-reports
#         curl -s 'https://api.github.com/orgs/'"$GIT_ORG"'/repos?per_page=100&page=1' | jq '.[]|.clone_url' | cut -d '"' -f2 > git_repo_url.txt
      - name: gitleaks
        run: |
         for url in $(cat git-repo.txt); do tc_tmp=$(echo $url | sed 's/\///g' | sed 's/\.//g'); touch $tc_tmp.json; ./gitleaks --repo-url=https://$url -v --report=$tc_tmp.json.json; mv $tc_tmp.json gitleaks-reports/; done
         zip -r gitleaks-reports.zip gitleaks-reports/
      - name: Send Output to Slack
        if: always()
        run: |
         S_CHANNEL=$(echo $TARGET | sed 's/\./_/g')
         curl -X POST -H 'Content-type: application/json' --data '{"text":"The job ${{ github.job}} in workflow ${{ github.workflow }} has _*`${{ job.status }}`*_  - '$TARGET'"}' "$S_WEBHOOK" ;
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$S_CHANNEL" -F title="$GIT_ORG"-Gitleaks -F file=@gitleaks-reports.zip

  Slack-Notification:
    if: always()
    runs-on: ubuntu-latest  
    needs: [DNSx, HTTProber, Subdomain-Takeover, Nuclei-Template-Scan, Mass-Nmap-Scan, Nmap-Vulnerability-Scan, URL-Enumeration, XSS-Hunter, Parameter-Discovery, Favicon-Hash-Extraction, Javascript-Scan, Secrets-Finder, CORS-Scanner, Heartbleed-Scanner, S3-Scanner, Aquatone, Gochopchop-Scan, Subdomainizer, Git-Dorker-Domain, Eyewitness, Whatweb, DNSC, broken-link-checker-full, broken-link-checker-light, KXSS-Enum, XSS-Hunt, MEG-HomePage]
    steps:
      - uses: actions/checkout@v2
      - name: Slack 
        run: |
         curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.workflow}} _*`COMPLETED`*_ - '$TARGET'"}' "$S_WEBHOOK" ;

