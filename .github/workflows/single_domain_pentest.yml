 #Stage 9
#Important Note:
# Before running this action, make sure you updated following secrets variables in settings.
#  1. TARGET_DOMAIN 
#       https://example.com
#  2. TARGET_SUBDOMAINS_LIST
#       https://inf.example.com
#       https://docs.example.com

name: Single Domain Pentest

on:
  workflow_dispatch:

env:
 TARGET_DOMAIN: ${{ secrets.DOMAIN }}
 TARGET_SUBDOMAINS_LIST: ${{ secrets.DOMAIN_SUBDOMAINS_HTTPS }}
 SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_USER_TOKEN }}
 SLACK_CHANNEL_NAME: ${{ secrets.SLACK_PRIVATE_BB_CHANNEL_NAME }}    
                
jobs:
  broken-link-hijacking:
    runs-on: ubuntu-latest            
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: sudo npm install broken-link-checker -g                         
      - name: blh
        run: |
         echo "$TARGET_SUBDOMAINS_LIST" > targets.txt
         while read url ; do printf "Site: $url" | tee -a blh-output.txt; blc -rof --filter-level 3 $url | tee -a blh-output.txt; done < targets.txt
      - name: Send Output Files Slack Channel
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-blh-Results -F filename="$TARGET_DOMAIN"-blh.txt -F file=@blh-output.txt
                 
  nuclei-scan:
    runs-on: ubuntu-latest      
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         git clone https://github.com/projectdiscovery/nuclei-templates.git
         wget --quiet https://github.com/projectdiscovery/nuclei/releases/download/v2.2.0/nuclei_2.2.0_linux_amd64.tar.gz
         tar -xzvf nuclei_2.2.0_linux_amd64.tar.gz
      - name: Nuclei scan
        run: | 
         echo "$TARGET_SUBDOMAINS_LIST" > targets.txt        
         ./nuclei -l targets.txt -c 500 -stats -silent -t nuclei-templates/ -exclude nuclei-templates/fuzzing/wp-plugin-scan.yaml -exclude nuclei-templates/fuzzing/basic-auth-bruteforce.yaml -exclude nuclei-templates/default-credentials/ -o nuclie-output.txt
         if [[ -f nuclie-output.txt ]]; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Nuclei-Scan-Results -F filename="$TARGET_DOMAIN"-nuclei-scan.txt -F file=@nuclie-output.txt; fi
         
  http-smuggler:
    runs-on: ubuntu-latest                               
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: git clone https://github.com/defparam/smuggler.git
      - name: Smuggler
        run: |
         echo "$TARGET_SUBDOMAINS_LIST" | cut -d "/" -f 3 | python3 smuggler/smuggler.py --log http-smuggler.txt
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-HTTP-Smuggler-Results -F filename="$TARGET_DOMAIN"-http-smuggler.txt -F file=@http-smuggler.txt
         
  js-hunter:
    runs-on: ubuntu-latest            
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         sudo apt-get install python3-setuptools
         git clone https://github.com/nsonaniya2010/SubDomainizer.git && pip3 install -r SubDomainizer/requirements.txt            
      - name: Subdomanizer
        run: |
         echo "$TARGET_SUBDOMAINS_LIST" > target.txt
         python3 SubDomainizer/SubDomainizer.py -l target.txt -cop cloud.txt -o subdomains.txt -sop secrets.txt
      - name: Send Output Files Slack Channel
        run: |
         subdomains_count=$(cat subdomains.txt | wc -w)
         secrets_count=$(cat secrets.txt | wc -w)
         cloud_count=$(cat cloud.txt | wc -w)
         if [[ -f subdomains.txt ]] && [[ "$subdomains_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomainizer-Results -F filename="$TARGET_DOMAIN"-subdomainizer-subdomains.txt -F file=@subdomains.txt ; fi
         if [[ -f cloud.txt ]] && [[ "$cloud_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomainizer-Results -F filename="$TARGET_DOMAIN"-subdomainizer-cloud.txt -F file=@cloud.txt ; fi
         if [[ -f secrets.txt ]] && [[ "$secrets_count" -gt 0 ]] ; then curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Subdomainizer-Results -F filename="$TARGET_DOMAIN"-subdomainizer-secrets.txt -F file=@secrets.txt ; fi

  nmap-scan:
    runs-on: ubuntu-latest                               
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install nmap -y
      - name: NMAP Scan
        run: |
         echo "$TARGET_SUBDOMAINS_LIST" | cut -d "/" -f 3 | targets.txt
         nmap -Pn -sC -sV -p- -iL targets.txt -oA nmap-advanced
         mkdir nmap-output && mv nmap-advanced.* nmap-output/ && zip nmap-output.zip nmap-output
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-nmap-Results -F filename="$TARGET_DOMAIN"-nmap-output.zip -F file=@nmap-output.zip
         
  nikto-scan:
    runs-on: ubuntu-latest                               
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install nikto -y
      - name: Nikto Scan
        run: |
         echo "$TARGET_SUBDOMAINS_LIST" | cut -d "/" -f 3 | targets.txt
         while read url ; do printf "Site: $url" | tee -a nikto-80-output.txt; nikto --host $url | tee -a nikto-80-output.txt; done < targets.txt
         while read url ; do printf "Site: $url" | tee -a nikto-443-output.txt; nikto --host $url:443 | tee -a nikto-443-output.txt; done < targets.txt
         mkdir nikto-output && mv nikto-80-output.txt nikto-443-output.txt nikto-output/ && zip nikto-output.zip nikto-output
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-nikto-Results -F filename="$TARGET_DOMAIN"-nikto-output.zip -F file=@nikto-output.zip

  url-collector:
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         go get -u github.com/tomnomnom/gf && cp /home/runner/go/bin/gf .
         git clone https://github.com/1ndianl33t/Gf-Patterns && mkdir ~/.gf && cp -r Gf-Patterns/*.json ~/.gf/
         wget --quiet https://github.com/tomnomnom/qsreplace/releases/download/v0.0.1/qsreplace-linux-386-0.0.1.tgz && tar xvf qsreplace-linux-386-0.0.1.tgz
         go get github.com/tomnomnom/waybackurls && cp /home/runner/go/bin/waybackurls .
         wget --quiet https://github.com/lc/gau/releases/download/v1.1.0/gau_1.1.0_linux_amd64.tar.gz && tar xvf gau_1.1.0_linux_amd64.tar.gz
      - name: waybackurls
        run: ./waybackurls "$TARGET_DOMAIN" | tee waybackurls-output.txt 
      - name: gau
        run: echo "$TARGET_DOMAIN" | ./gau | tee gau-output.txt      
      - name: Combine Output Files
        run: |
         cat waybackurls-output.txt gau-output.txt | uniq | tee all-urls-tmp.txt
         zip all-urls.txt.zip all-urls.txt && xz all-urls.txt.zip
         cat all-urls.txt | grep "=" | egrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt|js)" | tee temp-output.txt
         cat temp-output.txt | ./qsreplace FUZZ | tee -a all-urls-unqiue.txt
         zip all-urls-unqiue.txt.zip all-urls-unqiue.txt && xz all-urls-unqiue.txt.zip
      - name: Patterns
        run: |
         mkdir patterns-urls
         cat all-urls.txt | ./gf interestingEXT | tee -a patterns-urls/interestingEXT-params.txt
         cat all-urls.txt | ./gf jsvar | tee -a patterns-urls/jsvar-params.txt          
         cat all-urls-unqiue.txt | ./gf interestingparams | tee -a patterns-urls/interestingparams-params.txt
         cat all-urls-unqiue.txt | ./gf xss | tee -a patterns-urls/xss-params.txt
         cat all-urls-unqiue.txt | ./gf sqli | tee -a patterns-urls/sqli-params.txt          
         cat all-urls-unqiue.txt | ./gf lfi | tee -a patterns-urls/lfi-params.txt          
         cat all-urls-unqiue.txt | ./gf ssrf | tee -a patterns-urls/ssrf-params.txt          
         cat all-urls-unqiue.txt | ./gf redirect | tee -a patterns-urls/redirect-params.txt          
         cat all-urls-unqiue.txt | ./gf ssti | tee -a patterns-urls/ssti-params.txt          
         cat all-urls-unqiue.txt | ./gf rce | tee -a patterns-urls/rce-params.txt          
         cat all-urls-unqiue.txt | ./gf idor | tee -a patterns-urls/idor-params.txt          
         cat all-urls-unqiue.txt | ./gf debug_logic | tee -a patterns-urls/debug_logic-params.txt
         cat all-urls-unqiue.txt | ./gf img-traversal | tee -a patterns-urls/img-traversal-params.txt
         cat all-urls-unqiue.txt | ./gf interestingsubs | tee -a patterns-urls/interestingsubs-params.txt
         zip -r patterns-urls.zip patterns-urls && xz patterns-urls.zip       
      - name: Send Outputs to Slack Channel
        run: |
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Collect-All-Urls -F filename="$TARGET_DOMAIN"-all-urls.zip.xz -F file=@all-urls.txt.zip.xz
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Collect-All-Unique-Urls -F filename="$TARGET_DOMAIN"-all-urls-unqiue.txt.zip.xz -F file=@all-urls-unqiue.txt.zip.xz
         curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-GF-Patterns-Urls -F filename="$TARGET_DOMAIN"-patterns-urls.txt.zip.xz -F file=@patterns-urls.zip.xz

  whatweb:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
         git clone https://github.com/urbanadventurer/WhatWeb.git
         sudo gem install bundler
         cd WhatWeb/ && bundle install    
      - name: Whatweb
        run: |
         echo "$TARGET_SUBDOMAINS_LIST" | cut -d "/" -f 3 > WhatWeb/targets.txt
         cd WhatWeb/
         ./whatweb --input-file=targets.txt --verbose --log-json=whatweb-logs.json
         cp whatweb-logs.json ../  
      - name: Send Outputs to Slack Channel     
        run: curl https://slack.com/api/files.upload -F token="$SLACK_OAUTH_TOKEN" -F channels="$SLACK_CHANNEL_NAME" -F title="$TARGET_DOMAIN"-Whatweb-Results -F filename="$TARGET_DOMAIN"-whatweb-logs.txt -F file=@whatweb-logs.json
                 
